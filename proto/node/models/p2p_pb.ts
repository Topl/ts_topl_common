// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file node/models/p2p.proto (package co.topl.node.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Request type for CurrentKnownHosts
 *
 * @generated from message co.topl.node.models.CurrentKnownHostsReq
 */
export class CurrentKnownHostsReq extends Message<CurrentKnownHostsReq> {
  /**
   * @generated from field: uint32 maxCount = 1;
   */
  maxCount = 0;

  constructor(data?: PartialMessage<CurrentKnownHostsReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.node.models.CurrentKnownHostsReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "maxCount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentKnownHostsReq {
    return new CurrentKnownHostsReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentKnownHostsReq {
    return new CurrentKnownHostsReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentKnownHostsReq {
    return new CurrentKnownHostsReq().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentKnownHostsReq | PlainMessage<CurrentKnownHostsReq> | undefined, b: CurrentKnownHostsReq | PlainMessage<CurrentKnownHostsReq> | undefined): boolean {
    return proto3.util.equals(CurrentKnownHostsReq, a, b);
  }
}

/**
 * @generated from message co.topl.node.models.KnownHost
 */
export class KnownHost extends Message<KnownHost> {
  /**
   * @generated from field: bytes id = 3;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: uint32 port = 2;
   */
  port = 0;

  constructor(data?: PartialMessage<KnownHost>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.node.models.KnownHost";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KnownHost {
    return new KnownHost().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KnownHost {
    return new KnownHost().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KnownHost {
    return new KnownHost().fromJsonString(jsonString, options);
  }

  static equals(a: KnownHost | PlainMessage<KnownHost> | undefined, b: KnownHost | PlainMessage<KnownHost> | undefined): boolean {
    return proto3.util.equals(KnownHost, a, b);
  }
}

/**
 * Response type for CurrentKnownHosts
 *
 * @generated from message co.topl.node.models.CurrentKnownHostsRes
 */
export class CurrentKnownHostsRes extends Message<CurrentKnownHostsRes> {
  /**
   * @generated from field: repeated co.topl.node.models.KnownHost hotHosts = 1;
   */
  hotHosts: KnownHost[] = [];

  /**
   * @generated from field: repeated co.topl.node.models.KnownHost warmHosts = 2;
   */
  warmHosts: KnownHost[] = [];

  /**
   * @generated from field: repeated co.topl.node.models.KnownHost coldHosts = 3;
   */
  coldHosts: KnownHost[] = [];

  constructor(data?: PartialMessage<CurrentKnownHostsRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.node.models.CurrentKnownHostsRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hotHosts", kind: "message", T: KnownHost, repeated: true },
    { no: 2, name: "warmHosts", kind: "message", T: KnownHost, repeated: true },
    { no: 3, name: "coldHosts", kind: "message", T: KnownHost, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentKnownHostsRes {
    return new CurrentKnownHostsRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentKnownHostsRes {
    return new CurrentKnownHostsRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentKnownHostsRes {
    return new CurrentKnownHostsRes().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentKnownHostsRes | PlainMessage<CurrentKnownHostsRes> | undefined, b: CurrentKnownHostsRes | PlainMessage<CurrentKnownHostsRes> | undefined): boolean {
    return proto3.util.equals(CurrentKnownHostsRes, a, b);
  }
}

/**
 * @generated from message co.topl.node.models.PingMessage
 */
export class PingMessage extends Message<PingMessage> {
  /**
   * @generated from field: string ping = 1;
   */
  ping = "";

  constructor(data?: PartialMessage<PingMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.node.models.PingMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ping", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingMessage {
    return new PingMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingMessage {
    return new PingMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingMessage {
    return new PingMessage().fromJsonString(jsonString, options);
  }

  static equals(a: PingMessage | PlainMessage<PingMessage> | undefined, b: PingMessage | PlainMessage<PingMessage> | undefined): boolean {
    return proto3.util.equals(PingMessage, a, b);
  }
}

/**
 * @generated from message co.topl.node.models.PongMessage
 */
export class PongMessage extends Message<PongMessage> {
  /**
   * @generated from field: string pong = 1;
   */
  pong = "";

  constructor(data?: PartialMessage<PongMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.node.models.PongMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pong", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PongMessage {
    return new PongMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PongMessage {
    return new PongMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PongMessage {
    return new PongMessage().fromJsonString(jsonString, options);
  }

  static equals(a: PongMessage | PlainMessage<PongMessage> | undefined, b: PongMessage | PlainMessage<PongMessage> | undefined): boolean {
    return proto3.util.equals(PongMessage, a, b);
  }
}

