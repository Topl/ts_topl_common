// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file node/models/block.proto (package co.topl.node.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TransactionId } from "../../brambl/models/identifier_pb.js";
import { IoTransaction } from "../../brambl/models/transaction/io_transaction_pb.js";
import { BlockHeader } from "../../consensus/models/block_header_pb.js";

/**
 * Captures the ordering of transaction IDs within a block
 *
 * @generated from message co.topl.node.models.BlockBody
 */
export class BlockBody extends Message<BlockBody> {
  /**
   * A list of Transaction IDs included in this block
   *
   * @generated from field: repeated co.topl.brambl.models.TransactionId transactionIds = 1;
   */
  transactionIds: TransactionId[] = [];

  /**
   * An optional Transaction ID that represents the reward transaction for this block.
   *
   * @generated from field: co.topl.brambl.models.TransactionId rewardTransactionId = 2;
   */
  rewardTransactionId?: TransactionId;

  constructor(data?: PartialMessage<BlockBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.node.models.BlockBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactionIds", kind: "message", T: TransactionId, repeated: true },
    { no: 2, name: "rewardTransactionId", kind: "message", T: TransactionId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockBody {
    return new BlockBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockBody {
    return new BlockBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockBody {
    return new BlockBody().fromJsonString(jsonString, options);
  }

  static equals(a: BlockBody | PlainMessage<BlockBody> | undefined, b: BlockBody | PlainMessage<BlockBody> | undefined): boolean {
    return proto3.util.equals(BlockBody, a, b);
  }
}

/**
 * Captures the ordering of transactions (not just IDs) within a block
 *
 * @generated from message co.topl.node.models.FullBlockBody
 */
export class FullBlockBody extends Message<FullBlockBody> {
  /**
   * A list of Transactions included in this block
   *
   * @generated from field: repeated co.topl.brambl.models.transaction.IoTransaction transactions = 1;
   */
  transactions: IoTransaction[] = [];

  /**
   * An optional Transaction that represents the reward transaction for this block.
   *
   * @generated from field: co.topl.brambl.models.transaction.IoTransaction rewardTransaction = 2;
   */
  rewardTransaction?: IoTransaction;

  constructor(data?: PartialMessage<FullBlockBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.node.models.FullBlockBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactions", kind: "message", T: IoTransaction, repeated: true },
    { no: 2, name: "rewardTransaction", kind: "message", T: IoTransaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullBlockBody {
    return new FullBlockBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullBlockBody {
    return new FullBlockBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullBlockBody {
    return new FullBlockBody().fromJsonString(jsonString, options);
  }

  static equals(a: FullBlockBody | PlainMessage<FullBlockBody> | undefined, b: FullBlockBody | PlainMessage<FullBlockBody> | undefined): boolean {
    return proto3.util.equals(FullBlockBody, a, b);
  }
}

/**
 * Captures the header and all transactions in a block
 *
 * @generated from message co.topl.node.models.Block
 */
export class Block extends Message<Block> {
  /**
   * The block's header
   *
   * @generated from field: co.topl.consensus.models.BlockHeader header = 1;
   */
  header?: BlockHeader;

  /**
   * The block's body
   *
   * @generated from field: co.topl.node.models.BlockBody body = 2;
   */
  body?: BlockBody;

  constructor(data?: PartialMessage<Block>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.node.models.Block";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: BlockHeader },
    { no: 2, name: "body", kind: "message", T: BlockBody },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block {
    return new Block().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJsonString(jsonString, options);
  }

  static equals(a: Block | PlainMessage<Block> | undefined, b: Block | PlainMessage<Block> | undefined): boolean {
    return proto3.util.equals(Block, a, b);
  }
}

/**
 * Captures the header and all transactions in a block
 *
 * @generated from message co.topl.node.models.FullBlock
 */
export class FullBlock extends Message<FullBlock> {
  /**
   * The block's header
   *
   * @generated from field: co.topl.consensus.models.BlockHeader header = 1;
   */
  header?: BlockHeader;

  /**
   * The block's full body
   *
   * @generated from field: co.topl.node.models.FullBlockBody fullBody = 2;
   */
  fullBody?: FullBlockBody;

  constructor(data?: PartialMessage<FullBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.node.models.FullBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: BlockHeader },
    { no: 2, name: "fullBody", kind: "message", T: FullBlockBody },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullBlock {
    return new FullBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullBlock {
    return new FullBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullBlock {
    return new FullBlock().fromJsonString(jsonString, options);
  }

  static equals(a: FullBlock | PlainMessage<FullBlock> | undefined, b: FullBlock | PlainMessage<FullBlock> | undefined): boolean {
    return proto3.util.equals(FullBlock, a, b);
  }
}

