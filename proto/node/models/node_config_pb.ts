// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file node/models/node_config.proto (package co.topl.proto.node, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Contains the configurations of the node over time
 *
 * @generated from message co.topl.proto.node.NodeConfig
 */
export class NodeConfig extends Message<NodeConfig> {
  /**
   * Slot number
   *
   * @generated from field: uint64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * Configured slot duration
   *
   * @generated from field: uint64 slotDurationMillis = 2;
   */
  slotDurationMillis = protoInt64.zero;

  /**
   * Node computed epochLength
   *
   * @generated from field: uint64 epochLength = 3;
   */
  epochLength = protoInt64.zero;

  constructor(data?: PartialMessage<NodeConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.proto.node.NodeConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "slotDurationMillis", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "epochLength", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeConfig {
    return new NodeConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeConfig {
    return new NodeConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeConfig {
    return new NodeConfig().fromJsonString(jsonString, options);
  }

  static equals(a: NodeConfig | PlainMessage<NodeConfig> | undefined, b: NodeConfig | PlainMessage<NodeConfig> | undefined): boolean {
    return proto3.util.equals(NodeConfig, a, b);
  }
}

