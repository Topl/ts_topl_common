// @generated by protoc-gen-es v1.8.0
// @generated from file node/models/block.proto (package co.topl.node.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { TransactionId } from "../../brambl/models/identifier_pb.js";
import type { IoTransaction } from "../../brambl/models/transaction/io_transaction_pb.js";
import type { BlockHeader } from "../../consensus/models/block_header_pb.js";

/**
 * Captures the ordering of transaction IDs within a block
 *
 * @generated from message co.topl.node.models.BlockBody
 */
export declare class BlockBody extends Message<BlockBody> {
  /**
   * A list of Transaction IDs included in this block
   *
   * @generated from field: repeated co.topl.brambl.models.TransactionId transactionIds = 1;
   */
  transactionIds: TransactionId[];

  /**
   * An optional Transaction ID that represents the reward transaction for this block.
   *
   * @generated from field: co.topl.brambl.models.TransactionId rewardTransactionId = 2;
   */
  rewardTransactionId?: TransactionId;

  constructor(data?: PartialMessage<BlockBody>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.node.models.BlockBody";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockBody;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockBody;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockBody;

  static equals(a: BlockBody | PlainMessage<BlockBody> | undefined, b: BlockBody | PlainMessage<BlockBody> | undefined): boolean;
}

/**
 * Captures the ordering of transactions (not just IDs) within a block
 *
 * @generated from message co.topl.node.models.FullBlockBody
 */
export declare class FullBlockBody extends Message<FullBlockBody> {
  /**
   * A list of Transactions included in this block
   *
   * @generated from field: repeated co.topl.brambl.models.transaction.IoTransaction transactions = 1;
   */
  transactions: IoTransaction[];

  /**
   * An optional Transaction that represents the reward transaction for this block.
   *
   * @generated from field: co.topl.brambl.models.transaction.IoTransaction rewardTransaction = 2;
   */
  rewardTransaction?: IoTransaction;

  constructor(data?: PartialMessage<FullBlockBody>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.node.models.FullBlockBody";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullBlockBody;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullBlockBody;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullBlockBody;

  static equals(a: FullBlockBody | PlainMessage<FullBlockBody> | undefined, b: FullBlockBody | PlainMessage<FullBlockBody> | undefined): boolean;
}

/**
 * Captures the header and all transactions in a block
 *
 * @generated from message co.topl.node.models.Block
 */
export declare class Block extends Message<Block> {
  /**
   * The block's header
   *
   * @generated from field: co.topl.consensus.models.BlockHeader header = 1;
   */
  header?: BlockHeader;

  /**
   * The block's body
   *
   * @generated from field: co.topl.node.models.BlockBody body = 2;
   */
  body?: BlockBody;

  constructor(data?: PartialMessage<Block>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.node.models.Block";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block;

  static equals(a: Block | PlainMessage<Block> | undefined, b: Block | PlainMessage<Block> | undefined): boolean;
}

/**
 * Captures the header and all transactions in a block
 *
 * @generated from message co.topl.node.models.FullBlock
 */
export declare class FullBlock extends Message<FullBlock> {
  /**
   * The block's header
   *
   * @generated from field: co.topl.consensus.models.BlockHeader header = 1;
   */
  header?: BlockHeader;

  /**
   * The block's full body
   *
   * @generated from field: co.topl.node.models.FullBlockBody fullBody = 2;
   */
  fullBody?: FullBlockBody;

  constructor(data?: PartialMessage<FullBlock>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.node.models.FullBlock";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullBlock;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullBlock;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullBlock;

  static equals(a: FullBlock | PlainMessage<FullBlock> | undefined, b: FullBlock | PlainMessage<FullBlock> | undefined): boolean;
}

