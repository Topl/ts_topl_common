// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file node/services/bifrost_rpc.proto (package co.topl.node.services, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BroadcastTransactionReq, BroadcastTransactionRes, CurrentMempoolContainsReq, CurrentMempoolContainsRes, CurrentMempoolReq, CurrentMempoolRes, FetchBlockBodyReq, FetchBlockBodyRes, FetchBlockHeaderReq, FetchBlockHeaderRes, FetchBlockIdAtDepthReq, FetchBlockIdAtDepthRes, FetchBlockIdAtHeightReq, FetchBlockIdAtHeightRes, FetchEpochDataReq, FetchEpochDataRes, FetchNodeConfigReq, FetchNodeConfigRes, FetchTransactionReq, FetchTransactionRes, SynchronizationTraversalReq, SynchronizationTraversalRes } from "./bifrost_rpc_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service co.topl.node.services.NodeRpc
 */
export const NodeRpc = {
  typeName: "co.topl.node.services.NodeRpc",
  methods: {
    /**
     * Submit a proven Transaction to the node
     *
     * @generated from rpc co.topl.node.services.NodeRpc.BroadcastTransaction
     */
    broadcastTransaction: {
      name: "BroadcastTransaction",
      I: BroadcastTransactionReq,
      O: BroadcastTransactionRes,
      kind: MethodKind.Unary,
    },
    /**
     * Read the contents of the node's mempool
     *
     * @generated from rpc co.topl.node.services.NodeRpc.CurrentMempool
     */
    currentMempool: {
      name: "CurrentMempool",
      I: CurrentMempoolReq,
      O: CurrentMempoolRes,
      kind: MethodKind.Unary,
    },
    /**
     * Check the content of the node's mempool and return if a Transaction Id exists
     *
     * @generated from rpc co.topl.node.services.NodeRpc.CurrentMempoolContains
     */
    currentMempoolContains: {
      name: "CurrentMempoolContains",
      I: CurrentMempoolContainsReq,
      O: CurrentMempoolContainsRes,
      kind: MethodKind.Unary,
    },
    /**
     * retrieve a Block Header by its ID
     *
     * @generated from rpc co.topl.node.services.NodeRpc.FetchBlockHeader
     */
    fetchBlockHeader: {
      name: "FetchBlockHeader",
      I: FetchBlockHeaderReq,
      O: FetchBlockHeaderRes,
      kind: MethodKind.Unary,
    },
    /**
     * retrieve a Block Body by its ID
     *
     * @generated from rpc co.topl.node.services.NodeRpc.FetchBlockBody
     */
    fetchBlockBody: {
      name: "FetchBlockBody",
      I: FetchBlockBodyReq,
      O: FetchBlockBodyRes,
      kind: MethodKind.Unary,
    },
    /**
     * retrieve a Transaction by its ID
     *
     * @generated from rpc co.topl.node.services.NodeRpc.FetchTransaction
     */
    fetchTransaction: {
      name: "FetchTransaction",
      I: FetchTransactionReq,
      O: FetchTransactionRes,
      kind: MethodKind.Unary,
    },
    /**
     * retrieve the Block ID associated with a height, according to the node's canonical chain
     *
     * @generated from rpc co.topl.node.services.NodeRpc.FetchBlockIdAtHeight
     */
    fetchBlockIdAtHeight: {
      name: "FetchBlockIdAtHeight",
      I: FetchBlockIdAtHeightReq,
      O: FetchBlockIdAtHeightRes,
      kind: MethodKind.Unary,
    },
    /**
     * retrieve the Block ID associated with a depth, according to the node's canonical chain
     *
     * @generated from rpc co.topl.node.services.NodeRpc.FetchBlockIdAtDepth
     */
    fetchBlockIdAtDepth: {
      name: "FetchBlockIdAtDepth",
      I: FetchBlockIdAtDepthReq,
      O: FetchBlockIdAtDepthRes,
      kind: MethodKind.Unary,
    },
    /**
     * retrieve a stream of changes to the canonical head of the chain.
     *
     * @generated from rpc co.topl.node.services.NodeRpc.SynchronizationTraversal
     */
    synchronizationTraversal: {
      name: "SynchronizationTraversal",
      I: SynchronizationTraversalReq,
      O: SynchronizationTraversalRes,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * retrieve a stream of node's protocol configuration
     *
     * @generated from rpc co.topl.node.services.NodeRpc.FetchNodeConfig
     */
    fetchNodeConfig: {
      name: "FetchNodeConfig",
      I: FetchNodeConfigReq,
      O: FetchNodeConfigRes,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * retrieve epoch data content
     *
     * @generated from rpc co.topl.node.services.NodeRpc.FetchEpochData
     */
    fetchEpochData: {
      name: "FetchEpochData",
      I: FetchEpochDataReq,
      O: FetchEpochDataRes,
      kind: MethodKind.Unary,
    },
  }
} as const;

