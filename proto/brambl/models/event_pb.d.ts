// @generated by protoc-gen-es v1.8.0
// @generated from file brambl/models/event.proto (package co.topl.brambl.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Schedule } from "./transaction/schedule_pb.js";
import type { SmallData } from "../../quivr/models/shared_pb.js";
import type { TransactionOutputAddress } from "./address_pb.js";
import type { SeriesId } from "./identifier_pb.js";
import type { FungibilityType, QuantityDescriptorType } from "./box/asset_pb.js";

/**
 * Events are uniquely identifiable occurrences of state mutations within the blockchain protocol.
 * Each event is associated with certain data that may be updated every tick.
 *
 * @generated from message co.topl.brambl.models.Event
 */
export declare class Event extends Message<Event> {
  /**
   * @generated from oneof co.topl.brambl.models.Event.value
   */
  value: {
    /**
     * hard fork
     *
     * @generated from field: co.topl.brambl.models.Event.Eon eon = 1;
     */
    value: Event_Eon;
    case: "eon";
  } | {
    /**
     * configuration change
     *
     * @generated from field: co.topl.brambl.models.Event.Era era = 2;
     */
    value: Event_Era;
    case: "era";
  } | {
    /**
     * length of time in slots where stake updates occur
     *
     * @generated from field: co.topl.brambl.models.Event.Epoch epoch = 3;
     */
    value: Event_Epoch;
    case: "epoch";
  } | {
    /**
     * Header created
     *
     * @generated from field: co.topl.brambl.models.Event.Header header = 4;
     */
    value: Event_Header;
    case: "header";
  } | {
    /**
     * IO Transaction
     *
     * @generated from field: co.topl.brambl.models.Event.IoTransaction ioTransaction = 5;
     */
    value: Event_IoTransaction;
    case: "ioTransaction";
  } | {
    /**
     * Group policy
     *
     * @generated from field: co.topl.brambl.models.Event.GroupPolicy groupPolicy = 6;
     */
    value: Event_GroupPolicy;
    case: "groupPolicy";
  } | {
    /**
     * Series policy
     *
     * @generated from field: co.topl.brambl.models.Event.SeriesPolicy seriesPolicy = 7;
     */
    value: Event_SeriesPolicy;
    case: "seriesPolicy";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Event>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.Event";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event;

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean;
}

/**
 * @generated from message co.topl.brambl.models.Event.Eon
 */
export declare class Event_Eon extends Message<Event_Eon> {
  /**
   * @generated from field: uint64 beginSlot = 1;
   */
  beginSlot: bigint;

  /**
   * @generated from field: uint64 height = 2;
   */
  height: bigint;

  constructor(data?: PartialMessage<Event_Eon>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.Event.Eon";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Eon;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Eon;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Eon;

  static equals(a: Event_Eon | PlainMessage<Event_Eon> | undefined, b: Event_Eon | PlainMessage<Event_Eon> | undefined): boolean;
}

/**
 * @generated from message co.topl.brambl.models.Event.Era
 */
export declare class Event_Era extends Message<Event_Era> {
  /**
   * @generated from field: uint64 beginSlot = 1;
   */
  beginSlot: bigint;

  /**
   * @generated from field: uint64 height = 2;
   */
  height: bigint;

  constructor(data?: PartialMessage<Event_Era>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.Event.Era";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Era;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Era;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Era;

  static equals(a: Event_Era | PlainMessage<Event_Era> | undefined, b: Event_Era | PlainMessage<Event_Era> | undefined): boolean;
}

/**
 * @generated from message co.topl.brambl.models.Event.Epoch
 */
export declare class Event_Epoch extends Message<Event_Epoch> {
  /**
   * @generated from field: uint64 beginSlot = 1;
   */
  beginSlot: bigint;

  /**
   * @generated from field: uint64 height = 2;
   */
  height: bigint;

  constructor(data?: PartialMessage<Event_Epoch>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.Event.Epoch";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Epoch;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Epoch;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Epoch;

  static equals(a: Event_Epoch | PlainMessage<Event_Epoch> | undefined, b: Event_Epoch | PlainMessage<Event_Epoch> | undefined): boolean;
}

/**
 * @generated from message co.topl.brambl.models.Event.Header
 */
export declare class Event_Header extends Message<Event_Header> {
  /**
   * @generated from field: uint64 height = 1;
   */
  height: bigint;

  constructor(data?: PartialMessage<Event_Header>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.Event.Header";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Header;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Header;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Header;

  static equals(a: Event_Header | PlainMessage<Event_Header> | undefined, b: Event_Header | PlainMessage<Event_Header> | undefined): boolean;
}

/**
 * @generated from message co.topl.brambl.models.Event.IoTransaction
 */
export declare class Event_IoTransaction extends Message<Event_IoTransaction> {
  /**
   * the range of acceptable slots the transaction can be accepted into
   *
   * @generated from field: co.topl.brambl.models.transaction.Schedule schedule = 1;
   */
  schedule?: Schedule;

  /**
   * @generated from field: quivr.models.SmallData metadata = 4;
   */
  metadata?: SmallData;

  constructor(data?: PartialMessage<Event_IoTransaction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.Event.IoTransaction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_IoTransaction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_IoTransaction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_IoTransaction;

  static equals(a: Event_IoTransaction | PlainMessage<Event_IoTransaction> | undefined, b: Event_IoTransaction | PlainMessage<Event_IoTransaction> | undefined): boolean;
}

/**
 * @generated from message co.topl.brambl.models.Event.GroupPolicy
 */
export declare class Event_GroupPolicy extends Message<Event_GroupPolicy> {
  /**
   * Identifies the group policy for humans (do not confuse with the actual group identifier)
   *
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * The address of a UTXO. The UTXO contains the LVLs that are paid for minting the group constructor token.
   *
   * @generated from field: co.topl.brambl.models.TransactionOutputAddress registrationUtxo = 2;
   */
  registrationUtxo?: TransactionOutputAddress;

  /**
   * An optional series identifier. When this series identifier is defined, this groups that implement this policy can only be used to mint assets with the aforementioned series identifier
   *
   * @generated from field: co.topl.brambl.models.SeriesId fixedSeries = 3;
   */
  fixedSeries?: SeriesId;

  constructor(data?: PartialMessage<Event_GroupPolicy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.Event.GroupPolicy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_GroupPolicy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_GroupPolicy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_GroupPolicy;

  static equals(a: Event_GroupPolicy | PlainMessage<Event_GroupPolicy> | undefined, b: Event_GroupPolicy | PlainMessage<Event_GroupPolicy> | undefined): boolean;
}

/**
 * @generated from message co.topl.brambl.models.Event.SeriesPolicy
 */
export declare class Event_SeriesPolicy extends Message<Event_SeriesPolicy> {
  /**
   * The human readable name of this series. (do not confuse with the actual series identifier)
   *
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * This is an optional field. When provided it fixes the quantity of tokens that will be minted when this series is consumed,
   * and the series constructor is burned by the minting transaction.
   * When not provided, the series constructor is not burned, thus making the token supply unlimited.
   *
   * @generated from field: google.protobuf.UInt32Value tokenSupply = 2;
   */
  tokenSupply?: number;

  /**
   * The address of a UTXO. The UTXO contains the LVLs that are paid for minting the series constructor token.
   *
   * @generated from field: co.topl.brambl.models.TransactionOutputAddress registrationUtxo = 3;
   */
  registrationUtxo?: TransactionOutputAddress;

  /**
   * Describes the behavior of the quantity field of the assets minted using the series constructor derived from this policy.
   *
   * @generated from field: co.topl.brambl.models.box.QuantityDescriptorType quantityDescriptor = 4;
   */
  quantityDescriptor: QuantityDescriptorType;

  /**
   * Describes the fungibility of the assets minted using the series constructor token derived from this policy.
   *
   * @generated from field: co.topl.brambl.models.box.FungibilityType fungibility = 5;
   */
  fungibility: FungibilityType;

  /**
   * Describes the schema of the data stored in the metadata field of the Asset Minting Statement.
   *
   * @generated from field: google.protobuf.Struct ephemeralMetadataScheme = 6;
   */
  ephemeralMetadataScheme?: Struct;

  /**
   * Describes the schema of the data stored in the Asset Token.
   *
   * @generated from field: google.protobuf.Struct permanentMetadataScheme = 7;
   */
  permanentMetadataScheme?: Struct;

  constructor(data?: PartialMessage<Event_SeriesPolicy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.Event.SeriesPolicy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_SeriesPolicy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_SeriesPolicy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_SeriesPolicy;

  static equals(a: Event_SeriesPolicy | PlainMessage<Event_SeriesPolicy> | undefined, b: Event_SeriesPolicy | PlainMessage<Event_SeriesPolicy> | undefined): boolean;
}

