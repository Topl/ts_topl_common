// @generated by protoc-gen-es v1.8.0
// @generated from file brambl/models/address.proto (package co.topl.brambl.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { LockId, TransactionId } from "./identifier_pb.js";

/**
 * Used in UTXOs
 *
 * @generated from message co.topl.brambl.models.LockAddress
 */
export declare class LockAddress extends Message<LockAddress> {
  /**
   * @generated from field: uint32 network = 1;
   */
  network: number;

  /**
   * @generated from field: uint32 ledger = 2;
   */
  ledger: number;

  /**
   * @generated from field: co.topl.brambl.models.LockId id = 3;
   */
  id?: LockId;

  constructor(data?: PartialMessage<LockAddress>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.LockAddress";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockAddress;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockAddress;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockAddress;

  static equals(a: LockAddress | PlainMessage<LockAddress> | undefined, b: LockAddress | PlainMessage<LockAddress> | undefined): boolean;
}

/**
 * Used in STXOs
 *
 * @generated from message co.topl.brambl.models.TransactionOutputAddress
 */
export declare class TransactionOutputAddress extends Message<TransactionOutputAddress> {
  /**
   * @generated from field: uint32 network = 1;
   */
  network: number;

  /**
   * @generated from field: uint32 ledger = 2;
   */
  ledger: number;

  /**
   * index of the output (UTXO) within the transaction targeted by id.
   *
   * @generated from field: uint32 index = 3;
   */
  index: number;

  /**
   * @generated from field: co.topl.brambl.models.TransactionId id = 4;
   */
  id?: TransactionId;

  constructor(data?: PartialMessage<TransactionOutputAddress>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.TransactionOutputAddress";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionOutputAddress;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionOutputAddress;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionOutputAddress;

  static equals(a: TransactionOutputAddress | PlainMessage<TransactionOutputAddress> | undefined, b: TransactionOutputAddress | PlainMessage<TransactionOutputAddress> | undefined): boolean;
}

/**
 * Used in Challenge.PreviousProposition
 *
 * @generated from message co.topl.brambl.models.TransactionInputAddress
 */
export declare class TransactionInputAddress extends Message<TransactionInputAddress> {
  /**
   * @generated from field: uint32 network = 1;
   */
  network: number;

  /**
   * @generated from field: uint32 ledger = 2;
   */
  ledger: number;

  /**
   * @generated from field: uint32 index = 3;
   */
  index: number;

  /**
   * @generated from field: co.topl.brambl.models.TransactionId id = 4;
   */
  id?: TransactionId;

  constructor(data?: PartialMessage<TransactionInputAddress>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.TransactionInputAddress";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionInputAddress;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionInputAddress;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionInputAddress;

  static equals(a: TransactionInputAddress | PlainMessage<TransactionInputAddress> | undefined, b: TransactionInputAddress | PlainMessage<TransactionInputAddress> | undefined): boolean;
}

