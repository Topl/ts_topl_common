// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file brambl/models/identifier.proto (package co.topl.brambl.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Represents the identifier of a Transaction.  It is constructed from the evidence of the signable bytes of the Transaction.
 *
 * @generated from message co.topl.brambl.models.TransactionId
 */
export class TransactionId extends Message<TransactionId> {
  /**
   * The evidence of the Transaction's signable bytes
   * length = 32
   *
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<TransactionId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.TransactionId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionId {
    return new TransactionId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionId {
    return new TransactionId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionId {
    return new TransactionId().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionId | PlainMessage<TransactionId> | undefined, b: TransactionId | PlainMessage<TransactionId> | undefined): boolean {
    return proto3.util.equals(TransactionId, a, b);
  }
}

/**
 * Represents the identifier of a Lock.  It is constructed from the evidence of the signable bytes of the Lock.
 *
 * @generated from message co.topl.brambl.models.LockId
 */
export class LockId extends Message<LockId> {
  /**
   * The evidence of the Lock's signable bytes
   * length = 32
   *
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<LockId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.LockId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockId {
    return new LockId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockId {
    return new LockId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockId {
    return new LockId().fromJsonString(jsonString, options);
  }

  static equals(a: LockId | PlainMessage<LockId> | undefined, b: LockId | PlainMessage<LockId> | undefined): boolean {
    return proto3.util.equals(LockId, a, b);
  }
}

/**
 * Represents the identifier of an Accumulator Root.  It is constructed from the evidence of the signable bytes of the Lock.
 *
 * @generated from message co.topl.brambl.models.AccumulatorRootId
 */
export class AccumulatorRootId extends Message<AccumulatorRootId> {
  /**
   * The evidence of the Accumulator Root's signable bytes
   * length = 32
   *
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<AccumulatorRootId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.AccumulatorRootId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccumulatorRootId {
    return new AccumulatorRootId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccumulatorRootId {
    return new AccumulatorRootId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccumulatorRootId {
    return new AccumulatorRootId().fromJsonString(jsonString, options);
  }

  static equals(a: AccumulatorRootId | PlainMessage<AccumulatorRootId> | undefined, b: AccumulatorRootId | PlainMessage<AccumulatorRootId> | undefined): boolean {
    return proto3.util.equals(AccumulatorRootId, a, b);
  }
}

/**
 * Represents the identifier of an TAM V2 group.
 * It is constructed using SHA-256 digest from fields label+fixedSeries+seriesTokenSupply+transactionId+utxoIndex.
 *
 * @generated from message co.topl.brambl.models.GroupId
 */
export class GroupId extends Message<GroupId> {
  /**
   * The evidence of the Group signable bytes
   * length = 32
   *
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<GroupId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.GroupId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupId {
    return new GroupId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupId {
    return new GroupId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupId {
    return new GroupId().fromJsonString(jsonString, options);
  }

  static equals(a: GroupId | PlainMessage<GroupId> | undefined, b: GroupId | PlainMessage<GroupId> | undefined): boolean {
    return proto3.util.equals(GroupId, a, b);
  }
}

/**
 * Represents the identifier of an TAM V2 series.
 * It is constructed using SHA-256 digest from fields label+fixedSeries+seriesTokenSupply+transactionId+utxoIndex.
 *
 * @generated from message co.topl.brambl.models.SeriesId
 */
export class SeriesId extends Message<SeriesId> {
  /**
   * The evidence of the Group signable bytes
   * length = 32
   *
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<SeriesId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.SeriesId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeriesId {
    return new SeriesId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeriesId {
    return new SeriesId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeriesId {
    return new SeriesId().fromJsonString(jsonString, options);
  }

  static equals(a: SeriesId | PlainMessage<SeriesId> | undefined, b: SeriesId | PlainMessage<SeriesId> | undefined): boolean {
    return proto3.util.equals(SeriesId, a, b);
  }
}

