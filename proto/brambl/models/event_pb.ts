// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file brambl/models/event.proto (package co.topl.brambl.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, UInt32Value } from "@bufbuild/protobuf";
import { Schedule } from "./transaction/schedule_pb.js";
import { SmallData } from "../../quivr/models/shared_pb.js";
import { TransactionOutputAddress } from "./address_pb.js";
import { SeriesId } from "./identifier_pb.js";
import { FungibilityType, QuantityDescriptorType } from "./box/asset_pb.js";

/**
 * Events are uniquely identifiable occurrences of state mutations within the blockchain protocol.
 * Each event is associated with certain data that may be updated every tick.
 *
 * @generated from message co.topl.brambl.models.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from oneof co.topl.brambl.models.Event.value
   */
  value: {
    /**
     * hard fork
     *
     * @generated from field: co.topl.brambl.models.Event.Eon eon = 1;
     */
    value: Event_Eon;
    case: "eon";
  } | {
    /**
     * configuration change
     *
     * @generated from field: co.topl.brambl.models.Event.Era era = 2;
     */
    value: Event_Era;
    case: "era";
  } | {
    /**
     * length of time in slots where stake updates occur
     *
     * @generated from field: co.topl.brambl.models.Event.Epoch epoch = 3;
     */
    value: Event_Epoch;
    case: "epoch";
  } | {
    /**
     * Header created
     *
     * @generated from field: co.topl.brambl.models.Event.Header header = 4;
     */
    value: Event_Header;
    case: "header";
  } | {
    /**
     * IO Transaction
     *
     * @generated from field: co.topl.brambl.models.Event.IoTransaction ioTransaction = 5;
     */
    value: Event_IoTransaction;
    case: "ioTransaction";
  } | {
    /**
     * Group policy
     *
     * @generated from field: co.topl.brambl.models.Event.GroupPolicy groupPolicy = 6;
     */
    value: Event_GroupPolicy;
    case: "groupPolicy";
  } | {
    /**
     * Series policy
     *
     * @generated from field: co.topl.brambl.models.Event.SeriesPolicy seriesPolicy = 7;
     */
    value: Event_SeriesPolicy;
    case: "seriesPolicy";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "eon", kind: "message", T: Event_Eon, oneof: "value" },
    { no: 2, name: "era", kind: "message", T: Event_Era, oneof: "value" },
    { no: 3, name: "epoch", kind: "message", T: Event_Epoch, oneof: "value" },
    { no: 4, name: "header", kind: "message", T: Event_Header, oneof: "value" },
    { no: 5, name: "ioTransaction", kind: "message", T: Event_IoTransaction, oneof: "value" },
    { no: 6, name: "groupPolicy", kind: "message", T: Event_GroupPolicy, oneof: "value" },
    { no: 7, name: "seriesPolicy", kind: "message", T: Event_SeriesPolicy, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.Event.Eon
 */
export class Event_Eon extends Message<Event_Eon> {
  /**
   * @generated from field: uint64 beginSlot = 1;
   */
  beginSlot = protoInt64.zero;

  /**
   * @generated from field: uint64 height = 2;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<Event_Eon>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.Event.Eon";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "beginSlot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Eon {
    return new Event_Eon().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Eon {
    return new Event_Eon().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Eon {
    return new Event_Eon().fromJsonString(jsonString, options);
  }

  static equals(a: Event_Eon | PlainMessage<Event_Eon> | undefined, b: Event_Eon | PlainMessage<Event_Eon> | undefined): boolean {
    return proto3.util.equals(Event_Eon, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.Event.Era
 */
export class Event_Era extends Message<Event_Era> {
  /**
   * @generated from field: uint64 beginSlot = 1;
   */
  beginSlot = protoInt64.zero;

  /**
   * @generated from field: uint64 height = 2;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<Event_Era>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.Event.Era";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "beginSlot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Era {
    return new Event_Era().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Era {
    return new Event_Era().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Era {
    return new Event_Era().fromJsonString(jsonString, options);
  }

  static equals(a: Event_Era | PlainMessage<Event_Era> | undefined, b: Event_Era | PlainMessage<Event_Era> | undefined): boolean {
    return proto3.util.equals(Event_Era, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.Event.Epoch
 */
export class Event_Epoch extends Message<Event_Epoch> {
  /**
   * @generated from field: uint64 beginSlot = 1;
   */
  beginSlot = protoInt64.zero;

  /**
   * @generated from field: uint64 height = 2;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<Event_Epoch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.Event.Epoch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "beginSlot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Epoch {
    return new Event_Epoch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Epoch {
    return new Event_Epoch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Epoch {
    return new Event_Epoch().fromJsonString(jsonString, options);
  }

  static equals(a: Event_Epoch | PlainMessage<Event_Epoch> | undefined, b: Event_Epoch | PlainMessage<Event_Epoch> | undefined): boolean {
    return proto3.util.equals(Event_Epoch, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.Event.Header
 */
export class Event_Header extends Message<Event_Header> {
  /**
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<Event_Header>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.Event.Header";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Header {
    return new Event_Header().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Header {
    return new Event_Header().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Header {
    return new Event_Header().fromJsonString(jsonString, options);
  }

  static equals(a: Event_Header | PlainMessage<Event_Header> | undefined, b: Event_Header | PlainMessage<Event_Header> | undefined): boolean {
    return proto3.util.equals(Event_Header, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.Event.IoTransaction
 */
export class Event_IoTransaction extends Message<Event_IoTransaction> {
  /**
   * the range of acceptable slots the transaction can be accepted into
   *
   * @generated from field: co.topl.brambl.models.transaction.Schedule schedule = 1;
   */
  schedule?: Schedule;

  /**
   * @generated from field: quivr.models.SmallData metadata = 4;
   */
  metadata?: SmallData;

  constructor(data?: PartialMessage<Event_IoTransaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.Event.IoTransaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: Schedule },
    { no: 4, name: "metadata", kind: "message", T: SmallData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_IoTransaction {
    return new Event_IoTransaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_IoTransaction {
    return new Event_IoTransaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_IoTransaction {
    return new Event_IoTransaction().fromJsonString(jsonString, options);
  }

  static equals(a: Event_IoTransaction | PlainMessage<Event_IoTransaction> | undefined, b: Event_IoTransaction | PlainMessage<Event_IoTransaction> | undefined): boolean {
    return proto3.util.equals(Event_IoTransaction, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.Event.GroupPolicy
 */
export class Event_GroupPolicy extends Message<Event_GroupPolicy> {
  /**
   * Identifies the group policy for humans (do not confuse with the actual group identifier)
   *
   * @generated from field: string label = 1;
   */
  label = "";

  /**
   * The address of a UTXO. The UTXO contains the LVLs that are paid for minting the group constructor token.
   *
   * @generated from field: co.topl.brambl.models.TransactionOutputAddress registrationUtxo = 2;
   */
  registrationUtxo?: TransactionOutputAddress;

  /**
   * An optional series identifier. When this series identifier is defined, this groups that implement this policy can only be used to mint assets with the aforementioned series identifier
   *
   * @generated from field: co.topl.brambl.models.SeriesId fixedSeries = 3;
   */
  fixedSeries?: SeriesId;

  constructor(data?: PartialMessage<Event_GroupPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.Event.GroupPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "registrationUtxo", kind: "message", T: TransactionOutputAddress },
    { no: 3, name: "fixedSeries", kind: "message", T: SeriesId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_GroupPolicy {
    return new Event_GroupPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_GroupPolicy {
    return new Event_GroupPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_GroupPolicy {
    return new Event_GroupPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: Event_GroupPolicy | PlainMessage<Event_GroupPolicy> | undefined, b: Event_GroupPolicy | PlainMessage<Event_GroupPolicy> | undefined): boolean {
    return proto3.util.equals(Event_GroupPolicy, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.Event.SeriesPolicy
 */
export class Event_SeriesPolicy extends Message<Event_SeriesPolicy> {
  /**
   * The human readable name of this series. (do not confuse with the actual series identifier)
   *
   * @generated from field: string label = 1;
   */
  label = "";

  /**
   * This is an optional field. When provided it fixes the quantity of tokens that will be minted when this series is consumed,
   * and the series constructor is burned by the minting transaction.
   * When not provided, the series constructor is not burned, thus making the token supply unlimited.
   *
   * @generated from field: google.protobuf.UInt32Value tokenSupply = 2;
   */
  tokenSupply?: number;

  /**
   * The address of a UTXO. The UTXO contains the LVLs that are paid for minting the series constructor token.
   *
   * @generated from field: co.topl.brambl.models.TransactionOutputAddress registrationUtxo = 3;
   */
  registrationUtxo?: TransactionOutputAddress;

  /**
   * Describes the behavior of the quantity field of the assets minted using the series constructor derived from this policy.
   *
   * @generated from field: co.topl.brambl.models.box.QuantityDescriptorType quantityDescriptor = 4;
   */
  quantityDescriptor = QuantityDescriptorType.LIQUID;

  /**
   * Describes the fungibility of the assets minted using the series constructor token derived from this policy.
   *
   * @generated from field: co.topl.brambl.models.box.FungibilityType fungibility = 5;
   */
  fungibility = FungibilityType.GROUP_AND_SERIES;

  /**
   * Describes the schema of the data stored in the metadata field of the Asset Minting Statement.
   *
   * @generated from field: google.protobuf.Struct ephemeralMetadataScheme = 6;
   */
  ephemeralMetadataScheme?: Struct;

  /**
   * Describes the schema of the data stored in the Asset Token.
   *
   * @generated from field: google.protobuf.Struct permanentMetadataScheme = 7;
   */
  permanentMetadataScheme?: Struct;

  constructor(data?: PartialMessage<Event_SeriesPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.Event.SeriesPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tokenSupply", kind: "message", T: UInt32Value },
    { no: 3, name: "registrationUtxo", kind: "message", T: TransactionOutputAddress },
    { no: 4, name: "quantityDescriptor", kind: "enum", T: proto3.getEnumType(QuantityDescriptorType) },
    { no: 5, name: "fungibility", kind: "enum", T: proto3.getEnumType(FungibilityType) },
    { no: 6, name: "ephemeralMetadataScheme", kind: "message", T: Struct },
    { no: 7, name: "permanentMetadataScheme", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_SeriesPolicy {
    return new Event_SeriesPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_SeriesPolicy {
    return new Event_SeriesPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_SeriesPolicy {
    return new Event_SeriesPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: Event_SeriesPolicy | PlainMessage<Event_SeriesPolicy> | undefined, b: Event_SeriesPolicy | PlainMessage<Event_SeriesPolicy> | undefined): boolean {
    return proto3.util.equals(Event_SeriesPolicy, a, b);
  }
}

