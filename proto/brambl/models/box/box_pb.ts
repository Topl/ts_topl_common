// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file brambl/models/box/box.proto (package co.topl.brambl.models.box, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Lock } from "./lock_pb.js";
import { Value } from "./value_pb.js";

/**
 * encapsulates a value and lock that is needed to be satisfied in order to unlock value
 *
 * @generated from message co.topl.brambl.models.box.Box
 */
export class Box extends Message<Box> {
  /**
   * @generated from field: co.topl.brambl.models.box.Lock lock = 1;
   */
  lock?: Lock;

  /**
   * @generated from field: co.topl.brambl.models.box.Value value = 2;
   */
  value?: Value;

  constructor(data?: PartialMessage<Box>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Box";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock", kind: "message", T: Lock },
    { no: 2, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Box {
    return new Box().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Box {
    return new Box().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Box {
    return new Box().fromJsonString(jsonString, options);
  }

  static equals(a: Box | PlainMessage<Box> | undefined, b: Box | PlainMessage<Box> | undefined): boolean {
    return proto3.util.equals(Box, a, b);
  }
}

