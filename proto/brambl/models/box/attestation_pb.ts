// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file brambl/models/box/attestation.proto (package co.topl.brambl.models.box, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Lock_Commitment, Lock_Image, Lock_Predicate } from "./lock_pb.js";
import { Proof } from "../../../quivr/models/proof_pb.js";
import { Challenge } from "./challenge_pb.js";
import { Witness } from "../../../quivr/models/shared_pb.js";

/**
 * encapsulates the lock and responses are used to satisfy locks (may be successful or unsuccessful)
 *
 * @generated from message co.topl.brambl.models.box.Attestation
 */
export class Attestation extends Message<Attestation> {
  /**
   * @generated from oneof co.topl.brambl.models.box.Attestation.value
   */
  value: {
    /**
     * @generated from field: co.topl.brambl.models.box.Attestation.Predicate predicate = 1;
     */
    value: Attestation_Predicate;
    case: "predicate";
  } | {
    /**
     * @generated from field: co.topl.brambl.models.box.Attestation.Image image = 2;
     */
    value: Attestation_Image;
    case: "image";
  } | {
    /**
     * @generated from field: co.topl.brambl.models.box.Attestation.Commitment commitment = 3;
     */
    value: Attestation_Commitment;
    case: "commitment";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Attestation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Attestation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate", kind: "message", T: Attestation_Predicate, oneof: "value" },
    { no: 2, name: "image", kind: "message", T: Attestation_Image, oneof: "value" },
    { no: 3, name: "commitment", kind: "message", T: Attestation_Commitment, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attestation {
    return new Attestation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attestation {
    return new Attestation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attestation {
    return new Attestation().fromJsonString(jsonString, options);
  }

  static equals(a: Attestation | PlainMessage<Attestation> | undefined, b: Attestation | PlainMessage<Attestation> | undefined): boolean {
    return proto3.util.equals(Attestation, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.box.Attestation.Predicate
 */
export class Attestation_Predicate extends Message<Attestation_Predicate> {
  /**
   * @generated from field: co.topl.brambl.models.box.Lock.Predicate lock = 1;
   */
  lock?: Lock_Predicate;

  /**
   * list of optional values (proofs used to attempt to satisfy the challenges contained in the predicate lock)
   *
   * @generated from field: repeated quivr.models.Proof responses = 2;
   */
  responses: Proof[] = [];

  constructor(data?: PartialMessage<Attestation_Predicate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Attestation.Predicate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock", kind: "message", T: Lock_Predicate },
    { no: 2, name: "responses", kind: "message", T: Proof, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attestation_Predicate {
    return new Attestation_Predicate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attestation_Predicate {
    return new Attestation_Predicate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attestation_Predicate {
    return new Attestation_Predicate().fromJsonString(jsonString, options);
  }

  static equals(a: Attestation_Predicate | PlainMessage<Attestation_Predicate> | undefined, b: Attestation_Predicate | PlainMessage<Attestation_Predicate> | undefined): boolean {
    return proto3.util.equals(Attestation_Predicate, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.box.Attestation.Image
 */
export class Attestation_Image extends Message<Attestation_Image> {
  /**
   * @generated from field: co.topl.brambl.models.box.Lock.Image lock = 1;
   */
  lock?: Lock_Image;

  /**
   * list of optional values
   *
   * @generated from field: repeated co.topl.brambl.models.box.Challenge known = 2;
   */
  known: Challenge[] = [];

  /**
   * list of optional values
   *
   * @generated from field: repeated quivr.models.Proof responses = 3;
   */
  responses: Proof[] = [];

  constructor(data?: PartialMessage<Attestation_Image>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Attestation.Image";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock", kind: "message", T: Lock_Image },
    { no: 2, name: "known", kind: "message", T: Challenge, repeated: true },
    { no: 3, name: "responses", kind: "message", T: Proof, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attestation_Image {
    return new Attestation_Image().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attestation_Image {
    return new Attestation_Image().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attestation_Image {
    return new Attestation_Image().fromJsonString(jsonString, options);
  }

  static equals(a: Attestation_Image | PlainMessage<Attestation_Image> | undefined, b: Attestation_Image | PlainMessage<Attestation_Image> | undefined): boolean {
    return proto3.util.equals(Attestation_Image, a, b);
  }
}

/**
 * @generated from message co.topl.brambl.models.box.Attestation.Commitment
 */
export class Attestation_Commitment extends Message<Attestation_Commitment> {
  /**
   * @generated from field: co.topl.brambl.models.box.Lock.Commitment lock = 1;
   */
  lock?: Lock_Commitment;

  /**
   * list of claim propositions that must be proven as memebrs of the root commitment and be suitably satisfied by the given proofs
   *
   * @generated from field: repeated co.topl.brambl.models.box.Challenge known = 2;
   */
  known: Challenge[] = [];

  /**
   * list of witnesses for proving membership of claimed propositions
   *
   * @generated from field: repeated quivr.models.Witness witness = 3;
   */
  witness: Witness[] = [];

  /**
   * list of optional values
   *
   * @generated from field: repeated quivr.models.Proof responses = 4;
   */
  responses: Proof[] = [];

  constructor(data?: PartialMessage<Attestation_Commitment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Attestation.Commitment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock", kind: "message", T: Lock_Commitment },
    { no: 2, name: "known", kind: "message", T: Challenge, repeated: true },
    { no: 3, name: "witness", kind: "message", T: Witness, repeated: true },
    { no: 4, name: "responses", kind: "message", T: Proof, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attestation_Commitment {
    return new Attestation_Commitment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attestation_Commitment {
    return new Attestation_Commitment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attestation_Commitment {
    return new Attestation_Commitment().fromJsonString(jsonString, options);
  }

  static equals(a: Attestation_Commitment | PlainMessage<Attestation_Commitment> | undefined, b: Attestation_Commitment | PlainMessage<Attestation_Commitment> | undefined): boolean {
    return proto3.util.equals(Attestation_Commitment, a, b);
  }
}

