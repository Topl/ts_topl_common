// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file brambl/models/box/lock.proto (package co.topl.brambl.models.box, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Challenge } from "./challenge_pb.js";
import { AccumulatorRootId, LockId } from "../identifier_pb.js";

/**
 * used to lock a box value and needs to be satisfied in order for the value of the box to be spent
 * should be able to calculate or retrieve the root of the Lock
 * - from Predicate -> Image -> Commitment -> Signable -> Evidence
 *
 * @generated from message co.topl.brambl.models.box.Lock
 */
export class Lock extends Message<Lock> {
  /**
   * @generated from oneof co.topl.brambl.models.box.Lock.value
   */
  value: {
    /**
     * @generated from field: co.topl.brambl.models.box.Lock.Predicate predicate = 1;
     */
    value: Lock_Predicate;
    case: "predicate";
  } | {
    /**
     * @generated from field: co.topl.brambl.models.box.Lock.Image image = 2;
     */
    value: Lock_Image;
    case: "image";
  } | {
    /**
     * @generated from field: co.topl.brambl.models.box.Lock.Commitment commitment = 3;
     */
    value: Lock_Commitment;
    case: "commitment";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Lock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Lock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate", kind: "message", T: Lock_Predicate, oneof: "value" },
    { no: 2, name: "image", kind: "message", T: Lock_Image, oneof: "value" },
    { no: 3, name: "commitment", kind: "message", T: Lock_Commitment, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Lock {
    return new Lock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Lock {
    return new Lock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Lock {
    return new Lock().fromJsonString(jsonString, options);
  }

  static equals(a: Lock | PlainMessage<Lock> | undefined, b: Lock | PlainMessage<Lock> | undefined): boolean {
    return proto3.util.equals(Lock, a, b);
  }
}

/**
 * Private information
 * a Predicate is a type of lock that will be satisfied if at least the threshold number of the contained proposition are satisfied
 *
 * @generated from message co.topl.brambl.models.box.Lock.Predicate
 */
export class Lock_Predicate extends Message<Lock_Predicate> {
  /**
   * this should probably be a non-empty chain
   *
   * @generated from field: repeated co.topl.brambl.models.box.Challenge challenges = 1;
   */
  challenges: Challenge[] = [];

  /**
   * @generated from field: uint32 threshold = 2;
   */
  threshold = 0;

  constructor(data?: PartialMessage<Lock_Predicate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Lock.Predicate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenges", kind: "message", T: Challenge, repeated: true },
    { no: 2, name: "threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Lock_Predicate {
    return new Lock_Predicate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Lock_Predicate {
    return new Lock_Predicate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Lock_Predicate {
    return new Lock_Predicate().fromJsonString(jsonString, options);
  }

  static equals(a: Lock_Predicate | PlainMessage<Lock_Predicate> | undefined, b: Lock_Predicate | PlainMessage<Lock_Predicate> | undefined): boolean {
    return proto3.util.equals(Lock_Predicate, a, b);
  }
}

/**
 * Semi-public information
 * The most commonly shared construction between parties
 *
 * @generated from message co.topl.brambl.models.box.Lock.Image
 */
export class Lock_Image extends Message<Lock_Image> {
  /**
   * @generated from field: repeated co.topl.brambl.models.LockId leaves = 1;
   */
  leaves: LockId[] = [];

  /**
   * @generated from field: uint32 threshold = 2;
   */
  threshold = 0;

  constructor(data?: PartialMessage<Lock_Image>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Lock.Image";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "leaves", kind: "message", T: LockId, repeated: true },
    { no: 2, name: "threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Lock_Image {
    return new Lock_Image().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Lock_Image {
    return new Lock_Image().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Lock_Image {
    return new Lock_Image().fromJsonString(jsonString, options);
  }

  static equals(a: Lock_Image | PlainMessage<Lock_Image> | undefined, b: Lock_Image | PlainMessage<Lock_Image> | undefined): boolean {
    return proto3.util.equals(Lock_Image, a, b);
  }
}

/**
 * todo: jaa - should disable ot figure out how to provide the needed witness in the attestation
 * Public information
 * Predicate Commitments are used to encumber boxes
 * use a Root here so we can provide a membership proof of the conditions
 *
 * @generated from message co.topl.brambl.models.box.Lock.Commitment
 */
export class Lock_Commitment extends Message<Lock_Commitment> {
  /**
   * @generated from field: co.topl.brambl.models.AccumulatorRootId root = 1;
   */
  root?: AccumulatorRootId;

  /**
   * @generated from field: uint32 threshold = 2;
   */
  threshold = 0;

  constructor(data?: PartialMessage<Lock_Commitment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Lock.Commitment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "root", kind: "message", T: AccumulatorRootId },
    { no: 2, name: "threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Lock_Commitment {
    return new Lock_Commitment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Lock_Commitment {
    return new Lock_Commitment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Lock_Commitment {
    return new Lock_Commitment().fromJsonString(jsonString, options);
  }

  static equals(a: Lock_Commitment | PlainMessage<Lock_Commitment> | undefined, b: Lock_Commitment | PlainMessage<Lock_Commitment> | undefined): boolean {
    return proto3.util.equals(Lock_Commitment, a, b);
  }
}

