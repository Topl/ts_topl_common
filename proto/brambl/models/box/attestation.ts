/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: brambl/models/box/attestation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../validate/validate";
import * as dependency_2 from "./lock";
import * as dependency_3 from "./challenge";
import * as dependency_4 from "./../../../quivr/models/proof";
import * as dependency_5 from "./../../../quivr/models/shared";
import * as pb_1 from "google-protobuf";
export namespace co.topl.brambl.models.box {
    export class Attestation extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            predicate?: Attestation.Predicate;
            image?: never;
            commitment?: never;
        } | {
            predicate?: never;
            image?: Attestation.Image;
            commitment?: never;
        } | {
            predicate?: never;
            image?: never;
            commitment?: Attestation.Commitment;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("predicate" in data && data.predicate != undefined) {
                    this.predicate = data.predicate;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("commitment" in data && data.commitment != undefined) {
                    this.commitment = data.commitment;
                }
            }
        }
        get predicate() {
            return pb_1.Message.getWrapperField(this, Attestation.Predicate, 1) as Attestation.Predicate;
        }
        set predicate(value: Attestation.Predicate) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_predicate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get image() {
            return pb_1.Message.getWrapperField(this, Attestation.Image, 2) as Attestation.Image;
        }
        set image(value: Attestation.Image) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get commitment() {
            return pb_1.Message.getWrapperField(this, Attestation.Commitment, 3) as Attestation.Commitment;
        }
        set commitment(value: Attestation.Commitment) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_commitment() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "predicate" | "image" | "commitment";
            } = {
                0: "none",
                1: "predicate",
                2: "image",
                3: "commitment"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            predicate?: ReturnType<typeof Attestation.Predicate.prototype.toObject>;
            image?: ReturnType<typeof Attestation.Image.prototype.toObject>;
            commitment?: ReturnType<typeof Attestation.Commitment.prototype.toObject>;
        }): Attestation {
            const message = new Attestation({});
            if (data.predicate != null) {
                message.predicate = Attestation.Predicate.fromObject(data.predicate);
            }
            if (data.image != null) {
                message.image = Attestation.Image.fromObject(data.image);
            }
            if (data.commitment != null) {
                message.commitment = Attestation.Commitment.fromObject(data.commitment);
            }
            return message;
        }
        toObject() {
            const data: {
                predicate?: ReturnType<typeof Attestation.Predicate.prototype.toObject>;
                image?: ReturnType<typeof Attestation.Image.prototype.toObject>;
                commitment?: ReturnType<typeof Attestation.Commitment.prototype.toObject>;
            } = {};
            if (this.predicate != null) {
                data.predicate = this.predicate.toObject();
            }
            if (this.image != null) {
                data.image = this.image.toObject();
            }
            if (this.commitment != null) {
                data.commitment = this.commitment.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_predicate)
                writer.writeMessage(1, this.predicate, () => this.predicate.serialize(writer));
            if (this.has_image)
                writer.writeMessage(2, this.image, () => this.image.serialize(writer));
            if (this.has_commitment)
                writer.writeMessage(3, this.commitment, () => this.commitment.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Attestation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Attestation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.predicate, () => message.predicate = Attestation.Predicate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.image, () => message.image = Attestation.Image.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.commitment, () => message.commitment = Attestation.Commitment.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Attestation {
            return Attestation.deserialize(bytes);
        }
    }
    export namespace Attestation {
        export class Predicate extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                lock?: dependency_2.co.topl.brambl.models.box.Lock.Predicate;
                responses?: dependency_4.quivr.models.Proof[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("lock" in data && data.lock != undefined) {
                        this.lock = data.lock;
                    }
                    if ("responses" in data && data.responses != undefined) {
                        this.responses = data.responses;
                    }
                }
            }
            get lock() {
                return pb_1.Message.getWrapperField(this, dependency_2.co.topl.brambl.models.box.Lock.Predicate, 1) as dependency_2.co.topl.brambl.models.box.Lock.Predicate;
            }
            set lock(value: dependency_2.co.topl.brambl.models.box.Lock.Predicate) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_lock() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get responses() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_4.quivr.models.Proof, 2) as dependency_4.quivr.models.Proof[];
            }
            set responses(value: dependency_4.quivr.models.Proof[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                lock?: ReturnType<typeof dependency_2.co.topl.brambl.models.box.Lock.Predicate.prototype.toObject>;
                responses?: ReturnType<typeof dependency_4.quivr.models.Proof.prototype.toObject>[];
            }): Predicate {
                const message = new Predicate({});
                if (data.lock != null) {
                    message.lock = dependency_2.co.topl.brambl.models.box.Lock.Predicate.fromObject(data.lock);
                }
                if (data.responses != null) {
                    message.responses = data.responses.map(item => dependency_4.quivr.models.Proof.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    lock?: ReturnType<typeof dependency_2.co.topl.brambl.models.box.Lock.Predicate.prototype.toObject>;
                    responses?: ReturnType<typeof dependency_4.quivr.models.Proof.prototype.toObject>[];
                } = {};
                if (this.lock != null) {
                    data.lock = this.lock.toObject();
                }
                if (this.responses != null) {
                    data.responses = this.responses.map((item: dependency_4.quivr.models.Proof) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_lock)
                    writer.writeMessage(1, this.lock, () => this.lock.serialize(writer));
                if (this.responses.length)
                    writer.writeRepeatedMessage(2, this.responses, (item: dependency_4.quivr.models.Proof) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Predicate {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Predicate();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.lock, () => message.lock = dependency_2.co.topl.brambl.models.box.Lock.Predicate.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.responses, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.quivr.models.Proof.deserialize(reader), dependency_4.quivr.models.Proof));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Predicate {
                return Predicate.deserialize(bytes);
            }
        }
        export class Image extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                lock?: dependency_2.co.topl.brambl.models.box.Lock.Image;
                known?: dependency_3.co.topl.brambl.models.box.Challenge[];
                responses?: dependency_4.quivr.models.Proof[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("lock" in data && data.lock != undefined) {
                        this.lock = data.lock;
                    }
                    if ("known" in data && data.known != undefined) {
                        this.known = data.known;
                    }
                    if ("responses" in data && data.responses != undefined) {
                        this.responses = data.responses;
                    }
                }
            }
            get lock() {
                return pb_1.Message.getWrapperField(this, dependency_2.co.topl.brambl.models.box.Lock.Image, 1) as dependency_2.co.topl.brambl.models.box.Lock.Image;
            }
            set lock(value: dependency_2.co.topl.brambl.models.box.Lock.Image) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_lock() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get known() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.co.topl.brambl.models.box.Challenge, 2) as dependency_3.co.topl.brambl.models.box.Challenge[];
            }
            set known(value: dependency_3.co.topl.brambl.models.box.Challenge[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get responses() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_4.quivr.models.Proof, 3) as dependency_4.quivr.models.Proof[];
            }
            set responses(value: dependency_4.quivr.models.Proof[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                lock?: ReturnType<typeof dependency_2.co.topl.brambl.models.box.Lock.Image.prototype.toObject>;
                known?: ReturnType<typeof dependency_3.co.topl.brambl.models.box.Challenge.prototype.toObject>[];
                responses?: ReturnType<typeof dependency_4.quivr.models.Proof.prototype.toObject>[];
            }): Image {
                const message = new Image({});
                if (data.lock != null) {
                    message.lock = dependency_2.co.topl.brambl.models.box.Lock.Image.fromObject(data.lock);
                }
                if (data.known != null) {
                    message.known = data.known.map(item => dependency_3.co.topl.brambl.models.box.Challenge.fromObject(item));
                }
                if (data.responses != null) {
                    message.responses = data.responses.map(item => dependency_4.quivr.models.Proof.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    lock?: ReturnType<typeof dependency_2.co.topl.brambl.models.box.Lock.Image.prototype.toObject>;
                    known?: ReturnType<typeof dependency_3.co.topl.brambl.models.box.Challenge.prototype.toObject>[];
                    responses?: ReturnType<typeof dependency_4.quivr.models.Proof.prototype.toObject>[];
                } = {};
                if (this.lock != null) {
                    data.lock = this.lock.toObject();
                }
                if (this.known != null) {
                    data.known = this.known.map((item: dependency_3.co.topl.brambl.models.box.Challenge) => item.toObject());
                }
                if (this.responses != null) {
                    data.responses = this.responses.map((item: dependency_4.quivr.models.Proof) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_lock)
                    writer.writeMessage(1, this.lock, () => this.lock.serialize(writer));
                if (this.known.length)
                    writer.writeRepeatedMessage(2, this.known, (item: dependency_3.co.topl.brambl.models.box.Challenge) => item.serialize(writer));
                if (this.responses.length)
                    writer.writeRepeatedMessage(3, this.responses, (item: dependency_4.quivr.models.Proof) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Image {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Image();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.lock, () => message.lock = dependency_2.co.topl.brambl.models.box.Lock.Image.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.known, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.co.topl.brambl.models.box.Challenge.deserialize(reader), dependency_3.co.topl.brambl.models.box.Challenge));
                            break;
                        case 3:
                            reader.readMessage(message.responses, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_4.quivr.models.Proof.deserialize(reader), dependency_4.quivr.models.Proof));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Image {
                return Image.deserialize(bytes);
            }
        }
        export class Commitment extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                lock?: dependency_2.co.topl.brambl.models.box.Lock.Commitment;
                known?: dependency_3.co.topl.brambl.models.box.Challenge[];
                witness?: dependency_5.quivr.models.Witness[];
                responses?: dependency_4.quivr.models.Proof[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("lock" in data && data.lock != undefined) {
                        this.lock = data.lock;
                    }
                    if ("known" in data && data.known != undefined) {
                        this.known = data.known;
                    }
                    if ("witness" in data && data.witness != undefined) {
                        this.witness = data.witness;
                    }
                    if ("responses" in data && data.responses != undefined) {
                        this.responses = data.responses;
                    }
                }
            }
            get lock() {
                return pb_1.Message.getWrapperField(this, dependency_2.co.topl.brambl.models.box.Lock.Commitment, 1) as dependency_2.co.topl.brambl.models.box.Lock.Commitment;
            }
            set lock(value: dependency_2.co.topl.brambl.models.box.Lock.Commitment) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_lock() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get known() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.co.topl.brambl.models.box.Challenge, 2) as dependency_3.co.topl.brambl.models.box.Challenge[];
            }
            set known(value: dependency_3.co.topl.brambl.models.box.Challenge[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get witness() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_5.quivr.models.Witness, 3) as dependency_5.quivr.models.Witness[];
            }
            set witness(value: dependency_5.quivr.models.Witness[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get responses() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_4.quivr.models.Proof, 4) as dependency_4.quivr.models.Proof[];
            }
            set responses(value: dependency_4.quivr.models.Proof[]) {
                pb_1.Message.setRepeatedWrapperField(this, 4, value);
            }
            static fromObject(data: {
                lock?: ReturnType<typeof dependency_2.co.topl.brambl.models.box.Lock.Commitment.prototype.toObject>;
                known?: ReturnType<typeof dependency_3.co.topl.brambl.models.box.Challenge.prototype.toObject>[];
                witness?: ReturnType<typeof dependency_5.quivr.models.Witness.prototype.toObject>[];
                responses?: ReturnType<typeof dependency_4.quivr.models.Proof.prototype.toObject>[];
            }): Commitment {
                const message = new Commitment({});
                if (data.lock != null) {
                    message.lock = dependency_2.co.topl.brambl.models.box.Lock.Commitment.fromObject(data.lock);
                }
                if (data.known != null) {
                    message.known = data.known.map(item => dependency_3.co.topl.brambl.models.box.Challenge.fromObject(item));
                }
                if (data.witness != null) {
                    message.witness = data.witness.map(item => dependency_5.quivr.models.Witness.fromObject(item));
                }
                if (data.responses != null) {
                    message.responses = data.responses.map(item => dependency_4.quivr.models.Proof.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    lock?: ReturnType<typeof dependency_2.co.topl.brambl.models.box.Lock.Commitment.prototype.toObject>;
                    known?: ReturnType<typeof dependency_3.co.topl.brambl.models.box.Challenge.prototype.toObject>[];
                    witness?: ReturnType<typeof dependency_5.quivr.models.Witness.prototype.toObject>[];
                    responses?: ReturnType<typeof dependency_4.quivr.models.Proof.prototype.toObject>[];
                } = {};
                if (this.lock != null) {
                    data.lock = this.lock.toObject();
                }
                if (this.known != null) {
                    data.known = this.known.map((item: dependency_3.co.topl.brambl.models.box.Challenge) => item.toObject());
                }
                if (this.witness != null) {
                    data.witness = this.witness.map((item: dependency_5.quivr.models.Witness) => item.toObject());
                }
                if (this.responses != null) {
                    data.responses = this.responses.map((item: dependency_4.quivr.models.Proof) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_lock)
                    writer.writeMessage(1, this.lock, () => this.lock.serialize(writer));
                if (this.known.length)
                    writer.writeRepeatedMessage(2, this.known, (item: dependency_3.co.topl.brambl.models.box.Challenge) => item.serialize(writer));
                if (this.witness.length)
                    writer.writeRepeatedMessage(3, this.witness, (item: dependency_5.quivr.models.Witness) => item.serialize(writer));
                if (this.responses.length)
                    writer.writeRepeatedMessage(4, this.responses, (item: dependency_4.quivr.models.Proof) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Commitment {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Commitment();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.lock, () => message.lock = dependency_2.co.topl.brambl.models.box.Lock.Commitment.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.known, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.co.topl.brambl.models.box.Challenge.deserialize(reader), dependency_3.co.topl.brambl.models.box.Challenge));
                            break;
                        case 3:
                            reader.readMessage(message.witness, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_5.quivr.models.Witness.deserialize(reader), dependency_5.quivr.models.Witness));
                            break;
                        case 4:
                            reader.readMessage(message.responses, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_4.quivr.models.Proof.deserialize(reader), dependency_4.quivr.models.Proof));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Commitment {
                return Commitment.deserialize(bytes);
            }
        }
    }
}
