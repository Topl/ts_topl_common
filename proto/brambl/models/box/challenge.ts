/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: brambl/models/box/challenge.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../address";
import * as dependency_2 from "./../../../quivr/models/proposition";
import * as pb_1 from "google-protobuf";
export namespace co.topl.brambl.models.box {
    export class Challenge extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            revealed?: dependency_2.quivr.models.Proposition;
            previous?: never;
        } | {
            revealed?: never;
            previous?: Challenge.PreviousProposition;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("revealed" in data && data.revealed != undefined) {
                    this.revealed = data.revealed;
                }
                if ("previous" in data && data.previous != undefined) {
                    this.previous = data.previous;
                }
            }
        }
        get revealed() {
            return pb_1.Message.getWrapperField(this, dependency_2.quivr.models.Proposition, 1) as dependency_2.quivr.models.Proposition;
        }
        set revealed(value: dependency_2.quivr.models.Proposition) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_revealed() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get previous() {
            return pb_1.Message.getWrapperField(this, Challenge.PreviousProposition, 2) as Challenge.PreviousProposition;
        }
        set previous(value: Challenge.PreviousProposition) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_previous() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get proposition() {
            const cases: {
                [index: number]: "none" | "revealed" | "previous";
            } = {
                0: "none",
                1: "revealed",
                2: "previous"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            revealed?: ReturnType<typeof dependency_2.quivr.models.Proposition.prototype.toObject>;
            previous?: ReturnType<typeof Challenge.PreviousProposition.prototype.toObject>;
        }): Challenge {
            const message = new Challenge({});
            if (data.revealed != null) {
                message.revealed = dependency_2.quivr.models.Proposition.fromObject(data.revealed);
            }
            if (data.previous != null) {
                message.previous = Challenge.PreviousProposition.fromObject(data.previous);
            }
            return message;
        }
        toObject() {
            const data: {
                revealed?: ReturnType<typeof dependency_2.quivr.models.Proposition.prototype.toObject>;
                previous?: ReturnType<typeof Challenge.PreviousProposition.prototype.toObject>;
            } = {};
            if (this.revealed != null) {
                data.revealed = this.revealed.toObject();
            }
            if (this.previous != null) {
                data.previous = this.previous.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_revealed)
                writer.writeMessage(1, this.revealed, () => this.revealed.serialize(writer));
            if (this.has_previous)
                writer.writeMessage(2, this.previous, () => this.previous.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Challenge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Challenge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.revealed, () => message.revealed = dependency_2.quivr.models.Proposition.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.previous, () => message.previous = Challenge.PreviousProposition.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Challenge {
            return Challenge.deserialize(bytes);
        }
    }
    export namespace Challenge {
        export class PreviousProposition extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                address?: dependency_1.co.topl.brambl.models.TransactionInputAddress;
                index?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("address" in data && data.address != undefined) {
                        this.address = data.address;
                    }
                    if ("index" in data && data.index != undefined) {
                        this.index = data.index;
                    }
                }
            }
            get address() {
                return pb_1.Message.getWrapperField(this, dependency_1.co.topl.brambl.models.TransactionInputAddress, 1) as dependency_1.co.topl.brambl.models.TransactionInputAddress;
            }
            set address(value: dependency_1.co.topl.brambl.models.TransactionInputAddress) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_address() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get index() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set index(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                address?: ReturnType<typeof dependency_1.co.topl.brambl.models.TransactionInputAddress.prototype.toObject>;
                index?: number;
            }): PreviousProposition {
                const message = new PreviousProposition({});
                if (data.address != null) {
                    message.address = dependency_1.co.topl.brambl.models.TransactionInputAddress.fromObject(data.address);
                }
                if (data.index != null) {
                    message.index = data.index;
                }
                return message;
            }
            toObject() {
                const data: {
                    address?: ReturnType<typeof dependency_1.co.topl.brambl.models.TransactionInputAddress.prototype.toObject>;
                    index?: number;
                } = {};
                if (this.address != null) {
                    data.address = this.address.toObject();
                }
                if (this.index != null) {
                    data.index = this.index;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_address)
                    writer.writeMessage(1, this.address, () => this.address.serialize(writer));
                if (this.index != 0)
                    writer.writeUint32(2, this.index);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PreviousProposition {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PreviousProposition();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.address, () => message.address = dependency_1.co.topl.brambl.models.TransactionInputAddress.deserialize(reader));
                            break;
                        case 2:
                            message.index = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PreviousProposition {
                return PreviousProposition.deserialize(bytes);
            }
        }
    }
}
