// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file brambl/models/box/challenge.proto (package co.topl.brambl.models.box, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Proposition } from "../../../quivr/models/proposition_pb.js";
import { TransactionInputAddress } from "../address_pb.js";

/**
 * Challenge is a single field message with its options being
 * one of RevealedProposition or PreviousProposition
 *
 * @generated from message co.topl.brambl.models.box.Challenge
 */
export class Challenge extends Message<Challenge> {
  /**
   * @generated from oneof co.topl.brambl.models.box.Challenge.proposition
   */
  proposition: {
    /**
     * @generated from field: quivr.models.Proposition revealed = 1;
     */
    value: Proposition;
    case: "revealed";
  } | {
    /**
     * @generated from field: co.topl.brambl.models.box.Challenge.PreviousProposition previous = 2;
     */
    value: Challenge_PreviousProposition;
    case: "previous";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Challenge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Challenge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revealed", kind: "message", T: Proposition, oneof: "proposition" },
    { no: 2, name: "previous", kind: "message", T: Challenge_PreviousProposition, oneof: "proposition" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Challenge {
    return new Challenge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Challenge {
    return new Challenge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Challenge {
    return new Challenge().fromJsonString(jsonString, options);
  }

  static equals(a: Challenge | PlainMessage<Challenge> | undefined, b: Challenge | PlainMessage<Challenge> | undefined): boolean {
    return proto3.util.equals(Challenge, a, b);
  }
}

/**
 * Previousroposition requires two parameters
 * the transaction input address and index of the previously
 * revealed proposition.
 *
 * @generated from message co.topl.brambl.models.box.Challenge.PreviousProposition
 */
export class Challenge_PreviousProposition extends Message<Challenge_PreviousProposition> {
  /**
   * @generated from field: co.topl.brambl.models.TransactionInputAddress address = 1;
   */
  address?: TransactionInputAddress;

  /**
   * @generated from field: uint32 index = 2;
   */
  index = 0;

  constructor(data?: PartialMessage<Challenge_PreviousProposition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.box.Challenge.PreviousProposition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "message", T: TransactionInputAddress },
    { no: 2, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Challenge_PreviousProposition {
    return new Challenge_PreviousProposition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Challenge_PreviousProposition {
    return new Challenge_PreviousProposition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Challenge_PreviousProposition {
    return new Challenge_PreviousProposition().fromJsonString(jsonString, options);
  }

  static equals(a: Challenge_PreviousProposition | PlainMessage<Challenge_PreviousProposition> | undefined, b: Challenge_PreviousProposition | PlainMessage<Challenge_PreviousProposition> | undefined): boolean {
    return proto3.util.equals(Challenge_PreviousProposition, a, b);
  }
}

