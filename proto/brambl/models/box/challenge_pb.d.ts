// @generated by protoc-gen-es v1.8.0
// @generated from file brambl/models/box/challenge.proto (package co.topl.brambl.models.box, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Proposition } from "../../../quivr/models/proposition_pb.js";
import type { TransactionInputAddress } from "../address_pb.js";

/**
 * Challenge is a single field message with its options being
 * one of RevealedProposition or PreviousProposition
 *
 * @generated from message co.topl.brambl.models.box.Challenge
 */
export declare class Challenge extends Message<Challenge> {
  /**
   * @generated from oneof co.topl.brambl.models.box.Challenge.proposition
   */
  proposition: {
    /**
     * @generated from field: quivr.models.Proposition revealed = 1;
     */
    value: Proposition;
    case: "revealed";
  } | {
    /**
     * @generated from field: co.topl.brambl.models.box.Challenge.PreviousProposition previous = 2;
     */
    value: Challenge_PreviousProposition;
    case: "previous";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Challenge>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.box.Challenge";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Challenge;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Challenge;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Challenge;

  static equals(a: Challenge | PlainMessage<Challenge> | undefined, b: Challenge | PlainMessage<Challenge> | undefined): boolean;
}

/**
 * Previousroposition requires two parameters
 * the transaction input address and index of the previously
 * revealed proposition.
 *
 * @generated from message co.topl.brambl.models.box.Challenge.PreviousProposition
 */
export declare class Challenge_PreviousProposition extends Message<Challenge_PreviousProposition> {
  /**
   * @generated from field: co.topl.brambl.models.TransactionInputAddress address = 1;
   */
  address?: TransactionInputAddress;

  /**
   * @generated from field: uint32 index = 2;
   */
  index: number;

  constructor(data?: PartialMessage<Challenge_PreviousProposition>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.box.Challenge.PreviousProposition";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Challenge_PreviousProposition;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Challenge_PreviousProposition;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Challenge_PreviousProposition;

  static equals(a: Challenge_PreviousProposition | PlainMessage<Challenge_PreviousProposition> | undefined, b: Challenge_PreviousProposition | PlainMessage<Challenge_PreviousProposition> | undefined): boolean;
}

