// @generated by protoc-gen-es v1.8.0
// @generated from file brambl/models/box/lock.proto (package co.topl.brambl.models.box, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Challenge } from "./challenge_pb.js";
import { AccumulatorRootId, LockId } from "../identifier_pb.js";

/**
 * used to lock a box value and needs to be satisfied in order for the value of the box to be spent
 * should be able to calculate or retrieve the root of the Lock
 * - from Predicate -> Image -> Commitment -> Signable -> Evidence
 *
 * @generated from message co.topl.brambl.models.box.Lock
 */
export const Lock = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.brambl.models.box.Lock",
  () => [
    { no: 1, name: "predicate", kind: "message", T: Lock_Predicate, oneof: "value" },
    { no: 2, name: "image", kind: "message", T: Lock_Image, oneof: "value" },
    { no: 3, name: "commitment", kind: "message", T: Lock_Commitment, oneof: "value" },
  ],
);

/**
 * Private information
 * a Predicate is a type of lock that will be satisfied if at least the threshold number of the contained proposition are satisfied
 *
 * @generated from message co.topl.brambl.models.box.Lock.Predicate
 */
export const Lock_Predicate = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.brambl.models.box.Lock.Predicate",
  () => [
    { no: 1, name: "challenges", kind: "message", T: Challenge, repeated: true },
    { no: 2, name: "threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
  {localName: "Lock_Predicate"},
);

/**
 * Semi-public information
 * The most commonly shared construction between parties
 *
 * @generated from message co.topl.brambl.models.box.Lock.Image
 */
export const Lock_Image = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.brambl.models.box.Lock.Image",
  () => [
    { no: 1, name: "leaves", kind: "message", T: LockId, repeated: true },
    { no: 2, name: "threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
  {localName: "Lock_Image"},
);

/**
 * todo: jaa - should disable ot figure out how to provide the needed witness in the attestation
 * Public information
 * Predicate Commitments are used to encumber boxes
 * use a Root here so we can provide a membership proof of the conditions
 *
 * @generated from message co.topl.brambl.models.box.Lock.Commitment
 */
export const Lock_Commitment = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.brambl.models.box.Lock.Commitment",
  () => [
    { no: 1, name: "root", kind: "message", T: AccumulatorRootId },
    { no: 2, name: "threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
  {localName: "Lock_Commitment"},
);

