// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file brambl/models/address.proto (package co.topl.brambl.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { LockId, TransactionId } from "./identifier_pb.js";

/**
 * Used in UTXOs
 *
 * @generated from message co.topl.brambl.models.LockAddress
 */
export class LockAddress extends Message<LockAddress> {
  /**
   * @generated from field: uint32 network = 1;
   */
  network = 0;

  /**
   * @generated from field: uint32 ledger = 2;
   */
  ledger = 0;

  /**
   * @generated from field: co.topl.brambl.models.LockId id = 3;
   */
  id?: LockId;

  constructor(data?: PartialMessage<LockAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.LockAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "ledger", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "id", kind: "message", T: LockId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockAddress {
    return new LockAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockAddress {
    return new LockAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockAddress {
    return new LockAddress().fromJsonString(jsonString, options);
  }

  static equals(a: LockAddress | PlainMessage<LockAddress> | undefined, b: LockAddress | PlainMessage<LockAddress> | undefined): boolean {
    return proto3.util.equals(LockAddress, a, b);
  }
}

/**
 * Used in STXOs
 *
 * @generated from message co.topl.brambl.models.TransactionOutputAddress
 */
export class TransactionOutputAddress extends Message<TransactionOutputAddress> {
  /**
   * @generated from field: uint32 network = 1;
   */
  network = 0;

  /**
   * @generated from field: uint32 ledger = 2;
   */
  ledger = 0;

  /**
   * index of the output (UTXO) within the transaction targeted by id.
   *
   * @generated from field: uint32 index = 3;
   */
  index = 0;

  /**
   * @generated from field: co.topl.brambl.models.TransactionId id = 4;
   */
  id?: TransactionId;

  constructor(data?: PartialMessage<TransactionOutputAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.TransactionOutputAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "ledger", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "id", kind: "message", T: TransactionId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionOutputAddress {
    return new TransactionOutputAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionOutputAddress {
    return new TransactionOutputAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionOutputAddress {
    return new TransactionOutputAddress().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionOutputAddress | PlainMessage<TransactionOutputAddress> | undefined, b: TransactionOutputAddress | PlainMessage<TransactionOutputAddress> | undefined): boolean {
    return proto3.util.equals(TransactionOutputAddress, a, b);
  }
}

/**
 * Used in Challenge.PreviousProposition
 *
 * @generated from message co.topl.brambl.models.TransactionInputAddress
 */
export class TransactionInputAddress extends Message<TransactionInputAddress> {
  /**
   * @generated from field: uint32 network = 1;
   */
  network = 0;

  /**
   * @generated from field: uint32 ledger = 2;
   */
  ledger = 0;

  /**
   * @generated from field: uint32 index = 3;
   */
  index = 0;

  /**
   * @generated from field: co.topl.brambl.models.TransactionId id = 4;
   */
  id?: TransactionId;

  constructor(data?: PartialMessage<TransactionInputAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.TransactionInputAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "ledger", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "id", kind: "message", T: TransactionId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionInputAddress {
    return new TransactionInputAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionInputAddress {
    return new TransactionInputAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionInputAddress {
    return new TransactionInputAddress().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionInputAddress | PlainMessage<TransactionInputAddress> | undefined, b: TransactionInputAddress | PlainMessage<TransactionInputAddress> | undefined): boolean {
    return proto3.util.equals(TransactionInputAddress, a, b);
  }
}

