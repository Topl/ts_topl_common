// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file brambl/models/indices.proto (package co.topl.brambl.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message co.topl.brambl.models.Indices
 */
export class Indices extends Message<Indices> {
  /**
   * @generated from field: uint32 x = 1;
   */
  x = 0;

  /**
   * @generated from field: uint32 y = 2;
   */
  y = 0;

  /**
   * @generated from field: uint32 z = 3;
   */
  z = 0;

  constructor(data?: PartialMessage<Indices>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.brambl.models.Indices";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "y", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "z", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Indices {
    return new Indices().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Indices {
    return new Indices().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Indices {
    return new Indices().fromJsonString(jsonString, options);
  }

  static equals(a: Indices | PlainMessage<Indices> | undefined, b: Indices | PlainMessage<Indices> | undefined): boolean {
    return proto3.util.equals(Indices, a, b);
  }
}

