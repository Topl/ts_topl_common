// @generated by protoc-gen-es v1.8.0
// @generated from file brambl/models/evidence.proto (package co.topl.brambl.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Digest } from "../../quivr/models/shared_pb.js";

/**
 * Evidence should be a succinct, unique set of bytes used to distinguish between any two data objects.
 * Evidence is also meant to have a minimal amount of structure such that other domains may provide
 * their own similarly unique & succinct values. Quivr can cast such external domain "evidence" into Topl evidence
 * through the use of ContainsSignable[Evidence[_]]
 *
 * @generated from message co.topl.brambl.models.Evidence
 */
export declare class Evidence extends Message<Evidence> {
  /**
   * @generated from field: quivr.models.Digest digest = 1;
   */
  digest?: Digest;

  constructor(data?: PartialMessage<Evidence>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.brambl.models.Evidence";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Evidence;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Evidence;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Evidence;

  static equals(a: Evidence | PlainMessage<Evidence> | undefined, b: Evidence | PlainMessage<Evidence> | undefined): boolean;
}

