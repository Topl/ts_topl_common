// @generated by protoc-gen-es v1.8.0
// @generated from file quivr/models/shared.proto (package quivr.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";

/**
 * General purpose data
 *
 * @generated from message quivr.models.Data
 */
export declare class Data extends Message$1<Data> {
  /**
   * Byte representation of data value
   *
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<Data>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.Data";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data;

  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean;
}

/**
 * Data format used for metadata
 *
 * @generated from message quivr.models.SmallData
 */
export declare class SmallData extends Message$1<SmallData> {
  /**
   * Maximum length = 64
   *
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<SmallData>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.SmallData";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SmallData;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SmallData;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SmallData;

  static equals(a: SmallData | PlainMessage<SmallData> | undefined, b: SmallData | PlainMessage<SmallData> | undefined): boolean;
}

/**
 * Event root
 *
 * @generated from message quivr.models.Root
 */
export declare class Root extends Message$1<Root> {
  /**
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<Root>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.Root";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Root;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Root;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Root;

  static equals(a: Root | PlainMessage<Root> | undefined, b: Root | PlainMessage<Root> | undefined): boolean;
}

/**
 * Preimage (input) for a digest operation
 *
 * @generated from message quivr.models.Preimage
 */
export declare class Preimage extends Message$1<Preimage> {
  /**
   * @generated from field: bytes input = 1;
   */
  input: Uint8Array;

  /**
   * @generated from field: bytes salt = 2;
   */
  salt: Uint8Array;

  constructor(data?: PartialMessage<Preimage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.Preimage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Preimage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Preimage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Preimage;

  static equals(a: Preimage | PlainMessage<Preimage> | undefined, b: Preimage | PlainMessage<Preimage> | undefined): boolean;
}

/**
 * Information output to Hash
 *
 * @generated from message quivr.models.Digest
 */
export declare class Digest extends Message$1<Digest> {
  /**
   * strict length = 32
   *
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<Digest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.Digest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Digest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Digest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Digest;

  static equals(a: Digest | PlainMessage<Digest> | undefined, b: Digest | PlainMessage<Digest> | undefined): boolean;
}

/**
 * Encapsulates digest and preimage used to verify that preimage results in digest
 *
 * @generated from message quivr.models.DigestVerification
 */
export declare class DigestVerification extends Message$1<DigestVerification> {
  /**
   * @generated from field: quivr.models.Digest digest = 1;
   */
  digest?: Digest;

  /**
   * @generated from field: quivr.models.Preimage preimage = 2;
   */
  preimage?: Preimage;

  constructor(data?: PartialMessage<DigestVerification>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.DigestVerification";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DigestVerification;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DigestVerification;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DigestVerification;

  static equals(a: DigestVerification | PlainMessage<DigestVerification> | undefined, b: DigestVerification | PlainMessage<DigestVerification> | undefined): boolean;
}

/**
 * public key in a key pair used for verification
 *
 * @generated from message quivr.models.VerificationKey
 */
export declare class VerificationKey extends Message$1<VerificationKey> {
  /**
   * @generated from oneof quivr.models.VerificationKey.vk
   */
  vk: {
    /**
     * @generated from field: quivr.models.VerificationKey.Ed25519Vk ed25519 = 1;
     */
    value: VerificationKey_Ed25519Vk;
    case: "ed25519";
  } | {
    /**
     * @generated from field: quivr.models.VerificationKey.ExtendedEd25519Vk extendedEd25519 = 2;
     */
    value: VerificationKey_ExtendedEd25519Vk;
    case: "extendedEd25519";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<VerificationKey>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.VerificationKey";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationKey;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationKey;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationKey;

  static equals(a: VerificationKey | PlainMessage<VerificationKey> | undefined, b: VerificationKey | PlainMessage<VerificationKey> | undefined): boolean;
}

/**
 * @generated from message quivr.models.VerificationKey.Ed25519Vk
 */
export declare class VerificationKey_Ed25519Vk extends Message$1<VerificationKey_Ed25519Vk> {
  /**
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<VerificationKey_Ed25519Vk>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.VerificationKey.Ed25519Vk";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationKey_Ed25519Vk;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationKey_Ed25519Vk;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationKey_Ed25519Vk;

  static equals(a: VerificationKey_Ed25519Vk | PlainMessage<VerificationKey_Ed25519Vk> | undefined, b: VerificationKey_Ed25519Vk | PlainMessage<VerificationKey_Ed25519Vk> | undefined): boolean;
}

/**
 * @generated from message quivr.models.VerificationKey.ExtendedEd25519Vk
 */
export declare class VerificationKey_ExtendedEd25519Vk extends Message$1<VerificationKey_ExtendedEd25519Vk> {
  /**
   * @generated from field: quivr.models.VerificationKey.Ed25519Vk vk = 1;
   */
  vk?: VerificationKey_Ed25519Vk;

  /**
   * @generated from field: bytes chainCode = 2;
   */
  chainCode: Uint8Array;

  constructor(data?: PartialMessage<VerificationKey_ExtendedEd25519Vk>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.VerificationKey.ExtendedEd25519Vk";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationKey_ExtendedEd25519Vk;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationKey_ExtendedEd25519Vk;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationKey_ExtendedEd25519Vk;

  static equals(a: VerificationKey_ExtendedEd25519Vk | PlainMessage<VerificationKey_ExtendedEd25519Vk> | undefined, b: VerificationKey_ExtendedEd25519Vk | PlainMessage<VerificationKey_ExtendedEd25519Vk> | undefined): boolean;
}

/**
 * Private key used to sign
 *
 * @generated from message quivr.models.SigningKey
 */
export declare class SigningKey extends Message$1<SigningKey> {
  /**
   * @generated from oneof quivr.models.SigningKey.sk
   */
  sk: {
    /**
     * @generated from field: quivr.models.SigningKey.Ed25519Sk ed25519 = 1;
     */
    value: SigningKey_Ed25519Sk;
    case: "ed25519";
  } | {
    /**
     * @generated from field: quivr.models.SigningKey.ExtendedEd25519Sk extendedEd25519 = 2;
     */
    value: SigningKey_ExtendedEd25519Sk;
    case: "extendedEd25519";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<SigningKey>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.SigningKey";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SigningKey;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SigningKey;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SigningKey;

  static equals(a: SigningKey | PlainMessage<SigningKey> | undefined, b: SigningKey | PlainMessage<SigningKey> | undefined): boolean;
}

/**
 * @generated from message quivr.models.SigningKey.Ed25519Sk
 */
export declare class SigningKey_Ed25519Sk extends Message$1<SigningKey_Ed25519Sk> {
  /**
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<SigningKey_Ed25519Sk>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.SigningKey.Ed25519Sk";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SigningKey_Ed25519Sk;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SigningKey_Ed25519Sk;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SigningKey_Ed25519Sk;

  static equals(a: SigningKey_Ed25519Sk | PlainMessage<SigningKey_Ed25519Sk> | undefined, b: SigningKey_Ed25519Sk | PlainMessage<SigningKey_Ed25519Sk> | undefined): boolean;
}

/**
 * @generated from message quivr.models.SigningKey.ExtendedEd25519Sk
 */
export declare class SigningKey_ExtendedEd25519Sk extends Message$1<SigningKey_ExtendedEd25519Sk> {
  /**
   * @generated from field: bytes leftKey = 1;
   */
  leftKey: Uint8Array;

  /**
   * @generated from field: bytes rightKey = 2;
   */
  rightKey: Uint8Array;

  /**
   * @generated from field: bytes chainCode = 3;
   */
  chainCode: Uint8Array;

  constructor(data?: PartialMessage<SigningKey_ExtendedEd25519Sk>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.SigningKey.ExtendedEd25519Sk";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SigningKey_ExtendedEd25519Sk;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SigningKey_ExtendedEd25519Sk;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SigningKey_ExtendedEd25519Sk;

  static equals(a: SigningKey_ExtendedEd25519Sk | PlainMessage<SigningKey_ExtendedEd25519Sk> | undefined, b: SigningKey_ExtendedEd25519Sk | PlainMessage<SigningKey_ExtendedEd25519Sk> | undefined): boolean;
}

/**
 * Public and private key pairs used to sign and verify
 *
 * @generated from message quivr.models.KeyPair
 */
export declare class KeyPair extends Message$1<KeyPair> {
  /**
   * @generated from field: quivr.models.VerificationKey vk = 1;
   */
  vk?: VerificationKey;

  /**
   * @generated from field: quivr.models.SigningKey sk = 2;
   */
  sk?: SigningKey;

  constructor(data?: PartialMessage<KeyPair>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.KeyPair";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyPair;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyPair;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyPair;

  static equals(a: KeyPair | PlainMessage<KeyPair> | undefined, b: KeyPair | PlainMessage<KeyPair> | undefined): boolean;
}

/**
 * Message to sign
 *
 * @generated from message quivr.models.Message
 */
export declare class Message extends Message$1<Message> {
  /**
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<Message>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.Message";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message;

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean;
}

/**
 * generated signature
 *
 * @generated from message quivr.models.Witness
 */
export declare class Witness extends Message$1<Witness> {
  /**
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<Witness>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.Witness";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Witness;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Witness;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Witness;

  static equals(a: Witness | PlainMessage<Witness> | undefined, b: Witness | PlainMessage<Witness> | undefined): boolean;
}

/**
 * encapsulates data used to verify a signing routine
 *
 * @generated from message quivr.models.SignatureVerification
 */
export declare class SignatureVerification extends Message$1<SignatureVerification> {
  /**
   * @generated from field: quivr.models.VerificationKey verificationKey = 1;
   */
  verificationKey?: VerificationKey;

  /**
   * @generated from field: quivr.models.Witness signature = 2;
   */
  signature?: Witness;

  /**
   * @generated from field: quivr.models.Message message = 3;
   */
  message?: Message;

  constructor(data?: PartialMessage<SignatureVerification>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.SignatureVerification";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignatureVerification;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignatureVerification;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignatureVerification;

  static equals(a: SignatureVerification | PlainMessage<SignatureVerification> | undefined, b: SignatureVerification | PlainMessage<SignatureVerification> | undefined): boolean;
}

/**
 * signable in bytes
 *
 * @generated from message quivr.models.SignableBytes
 */
export declare class SignableBytes extends Message$1<SignableBytes> {
  /**
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<SignableBytes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.SignableBytes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignableBytes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignableBytes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignableBytes;

  static equals(a: SignableBytes | PlainMessage<SignableBytes> | undefined, b: SignableBytes | PlainMessage<SignableBytes> | undefined): boolean;
}

/**
 * Transaction bind uses signable bytes to bind a proof
 *
 * @generated from message quivr.models.TxBind
 */
export declare class TxBind extends Message$1<TxBind> {
  /**
   * @generated from field: bytes value = 2;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<TxBind>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.TxBind";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxBind;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxBind;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxBind;

  static equals(a: TxBind | PlainMessage<TxBind> | undefined, b: TxBind | PlainMessage<TxBind> | undefined): boolean;
}

/**
 * Represents a 128-bit integer
 *
 * @generated from message quivr.models.Int128
 */
export declare class Int128 extends Message$1<Int128> {
  /**
   * Java BigInt Representation: two's-complement, big-endian
   *
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<Int128>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.Int128";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Int128;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Int128;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Int128;

  static equals(a: Int128 | PlainMessage<Int128> | undefined, b: Int128 | PlainMessage<Int128> | undefined): boolean;
}

/**
 * @generated from message quivr.models.Ratio
 */
export declare class Ratio extends Message$1<Ratio> {
  /**
   * @generated from field: quivr.models.Int128 numerator = 1;
   */
  numerator?: Int128;

  /**
   * Populate with 1 if not defined
   *
   * @generated from field: quivr.models.Int128 denominator = 2;
   */
  denominator?: Int128;

  constructor(data?: PartialMessage<Ratio>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "quivr.models.Ratio";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ratio;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ratio;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ratio;

  static equals(a: Ratio | PlainMessage<Ratio> | undefined, b: Ratio | PlainMessage<Ratio> | undefined): boolean;
}

