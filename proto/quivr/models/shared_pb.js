// @generated by protoc-gen-es v1.8.0
// @generated from file quivr/models/shared.proto (package quivr.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * General purpose data
 *
 * @generated from message quivr.models.Data
 */
export const Data = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Data",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Data format used for metadata
 *
 * @generated from message quivr.models.SmallData
 */
export const SmallData = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.SmallData",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Event root
 *
 * @generated from message quivr.models.Root
 */
export const Root = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Root",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Preimage (input) for a digest operation
 *
 * @generated from message quivr.models.Preimage
 */
export const Preimage = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Preimage",
  () => [
    { no: 1, name: "input", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "salt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Information output to Hash
 *
 * @generated from message quivr.models.Digest
 */
export const Digest = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Digest",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Encapsulates digest and preimage used to verify that preimage results in digest
 *
 * @generated from message quivr.models.DigestVerification
 */
export const DigestVerification = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.DigestVerification",
  () => [
    { no: 1, name: "digest", kind: "message", T: Digest },
    { no: 2, name: "preimage", kind: "message", T: Preimage },
  ],
);

/**
 * public key in a key pair used for verification
 *
 * @generated from message quivr.models.VerificationKey
 */
export const VerificationKey = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.VerificationKey",
  () => [
    { no: 1, name: "ed25519", kind: "message", T: VerificationKey_Ed25519Vk, oneof: "vk" },
    { no: 2, name: "extendedEd25519", kind: "message", T: VerificationKey_ExtendedEd25519Vk, oneof: "vk" },
  ],
);

/**
 * @generated from message quivr.models.VerificationKey.Ed25519Vk
 */
export const VerificationKey_Ed25519Vk = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.VerificationKey.Ed25519Vk",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
  {localName: "VerificationKey_Ed25519Vk"},
);

/**
 * @generated from message quivr.models.VerificationKey.ExtendedEd25519Vk
 */
export const VerificationKey_ExtendedEd25519Vk = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.VerificationKey.ExtendedEd25519Vk",
  () => [
    { no: 1, name: "vk", kind: "message", T: VerificationKey_Ed25519Vk },
    { no: 2, name: "chainCode", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
  {localName: "VerificationKey_ExtendedEd25519Vk"},
);

/**
 * Private key used to sign
 *
 * @generated from message quivr.models.SigningKey
 */
export const SigningKey = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.SigningKey",
  () => [
    { no: 1, name: "ed25519", kind: "message", T: SigningKey_Ed25519Sk, oneof: "sk" },
    { no: 2, name: "extendedEd25519", kind: "message", T: SigningKey_ExtendedEd25519Sk, oneof: "sk" },
  ],
);

/**
 * @generated from message quivr.models.SigningKey.Ed25519Sk
 */
export const SigningKey_Ed25519Sk = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.SigningKey.Ed25519Sk",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
  {localName: "SigningKey_Ed25519Sk"},
);

/**
 * @generated from message quivr.models.SigningKey.ExtendedEd25519Sk
 */
export const SigningKey_ExtendedEd25519Sk = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.SigningKey.ExtendedEd25519Sk",
  () => [
    { no: 1, name: "leftKey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "rightKey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "chainCode", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
  {localName: "SigningKey_ExtendedEd25519Sk"},
);

/**
 * Public and private key pairs used to sign and verify
 *
 * @generated from message quivr.models.KeyPair
 */
export const KeyPair = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.KeyPair",
  () => [
    { no: 1, name: "vk", kind: "message", T: VerificationKey },
    { no: 2, name: "sk", kind: "message", T: SigningKey },
  ],
);

/**
 * Message to sign
 *
 * @generated from message quivr.models.Message
 */
export const Message = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Message",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * generated signature
 *
 * @generated from message quivr.models.Witness
 */
export const Witness = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Witness",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * encapsulates data used to verify a signing routine
 *
 * @generated from message quivr.models.SignatureVerification
 */
export const SignatureVerification = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.SignatureVerification",
  () => [
    { no: 1, name: "verificationKey", kind: "message", T: VerificationKey },
    { no: 2, name: "signature", kind: "message", T: Witness },
    { no: 3, name: "message", kind: "message", T: Message },
  ],
);

/**
 * signable in bytes
 *
 * @generated from message quivr.models.SignableBytes
 */
export const SignableBytes = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.SignableBytes",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Transaction bind uses signable bytes to bind a proof
 *
 * @generated from message quivr.models.TxBind
 */
export const TxBind = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.TxBind",
  () => [
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Represents a 128-bit integer
 *
 * @generated from message quivr.models.Int128
 */
export const Int128 = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Int128",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message quivr.models.Ratio
 */
export const Ratio = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Ratio",
  () => [
    { no: 1, name: "numerator", kind: "message", T: Int128 },
    { no: 2, name: "denominator", kind: "message", T: Int128 },
  ],
);

