// @generated by protoc-gen-es v1.8.0
// @generated from file quivr/models/proof.proto (package quivr.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Preimage, TxBind, Witness } from "./shared_pb.js";

/**
 * Proofs that are used to satisfy propositions
 *
 * @generated from message quivr.models.Proof
 */
export const Proof = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof",
  () => [
    { no: 1, name: "locked", kind: "message", T: Proof_Locked, oneof: "value" },
    { no: 2, name: "digest", kind: "message", T: Proof_Digest, oneof: "value" },
    { no: 3, name: "digitalSignature", kind: "message", T: Proof_DigitalSignature, oneof: "value" },
    { no: 4, name: "heightRange", kind: "message", T: Proof_HeightRange, oneof: "value" },
    { no: 5, name: "tickRange", kind: "message", T: Proof_TickRange, oneof: "value" },
    { no: 6, name: "exactMatch", kind: "message", T: Proof_ExactMatch, oneof: "value" },
    { no: 7, name: "lessThan", kind: "message", T: Proof_LessThan, oneof: "value" },
    { no: 8, name: "greaterThan", kind: "message", T: Proof_GreaterThan, oneof: "value" },
    { no: 9, name: "equalTo", kind: "message", T: Proof_EqualTo, oneof: "value" },
    { no: 10, name: "threshold", kind: "message", T: Proof_Threshold, oneof: "value" },
    { no: 11, name: "not", kind: "message", T: Proof_Not, oneof: "value" },
    { no: 12, name: "and", kind: "message", T: Proof_And, oneof: "value" },
    { no: 13, name: "or", kind: "message", T: Proof_Or, oneof: "value" },
  ],
);

/**
 * token = "locked"
 *
 * txBind = [0]
 *
 * @generated from message quivr.models.Proof.Locked
 */
export const Proof_Locked = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.Locked",
  [],
  {localName: "Proof_Locked"},
);

/**
 * token = "digest"
 *
 * @generated from message quivr.models.Proof.Digest
 */
export const Proof_Digest = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.Digest",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
    { no: 2, name: "preimage", kind: "message", T: Preimage },
  ],
  {localName: "Proof_Digest"},
);

/**
 * token = "digital_signature"
 *
 * @generated from message quivr.models.Proof.DigitalSignature
 */
export const Proof_DigitalSignature = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.DigitalSignature",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
    { no: 2, name: "witness", kind: "message", T: Witness },
  ],
  {localName: "Proof_DigitalSignature"},
);

/**
 * token = "height_range"
 *
 * @generated from message quivr.models.Proof.HeightRange
 */
export const Proof_HeightRange = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.HeightRange",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
  ],
  {localName: "Proof_HeightRange"},
);

/**
 * token = "tick_range"
 *
 * @generated from message quivr.models.Proof.TickRange
 */
export const Proof_TickRange = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.TickRange",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
  ],
  {localName: "Proof_TickRange"},
);

/**
 * token = "exact_match"
 *
 * @generated from message quivr.models.Proof.ExactMatch
 */
export const Proof_ExactMatch = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.ExactMatch",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
  ],
  {localName: "Proof_ExactMatch"},
);

/**
 * token = "less_than"
 *
 * @generated from message quivr.models.Proof.LessThan
 */
export const Proof_LessThan = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.LessThan",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
  ],
  {localName: "Proof_LessThan"},
);

/**
 * token = "greater_than"
 *
 * @generated from message quivr.models.Proof.GreaterThan
 */
export const Proof_GreaterThan = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.GreaterThan",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
  ],
  {localName: "Proof_GreaterThan"},
);

/**
 * token = "equal_to"
 *
 * @generated from message quivr.models.Proof.EqualTo
 */
export const Proof_EqualTo = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.EqualTo",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
  ],
  {localName: "Proof_EqualTo"},
);

/**
 * token = "threshold"
 *
 * @generated from message quivr.models.Proof.Threshold
 */
export const Proof_Threshold = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.Threshold",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
    { no: 2, name: "responses", kind: "message", T: Proof, repeated: true },
  ],
  {localName: "Proof_Threshold"},
);

/**
 * token = "not"
 *
 * @generated from message quivr.models.Proof.Not
 */
export const Proof_Not = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.Not",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
    { no: 2, name: "proof", kind: "message", T: Proof },
  ],
  {localName: "Proof_Not"},
);

/**
 * token = "and"
 *
 * @generated from message quivr.models.Proof.And
 */
export const Proof_And = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.And",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
    { no: 2, name: "left", kind: "message", T: Proof },
    { no: 3, name: "right", kind: "message", T: Proof },
  ],
  {localName: "Proof_And"},
);

/**
 * token = "or"
 *
 * @generated from message quivr.models.Proof.Or
 */
export const Proof_Or = /*@__PURE__*/ proto3.makeMessageType(
  "quivr.models.Proof.Or",
  () => [
    { no: 1, name: "transactionBind", kind: "message", T: TxBind },
    { no: 2, name: "left", kind: "message", T: Proof },
    { no: 3, name: "right", kind: "message", T: Proof },
  ],
  {localName: "Proof_Or"},
);

