// @generated by protoc-gen-es v1.8.0
// @generated from file genus/genus_rpc.proto (package co.topl.genus.services, syntax proto3)
/* eslint-disable */
// @ts-nocheck

///////////////////////////////////////////////////////////////////////////////
// Services provided by Genus
///////////////////////////////////////////////////////////////////////////////

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { FullBlock } from "../node/models/block_pb.js";
import type { AssetLabel, ChainDistance, ConfidenceFactor, IndexSpec, TransactionReceipt, Txo, TxoState } from "./genus_models_pb.js";
import type { BlockId } from "../consensus/models/block_id_pb.js";
import type { GroupId, SeriesId, TransactionId } from "../brambl/models/identifier_pb.js";
import type { LockAddress } from "../brambl/models/address_pb.js";
import type { Event_GroupPolicy, Event_SeriesPolicy } from "../brambl/models/event_pb.js";

/**
 * @generated from message co.topl.genus.services.GetExistingTransactionIndexesResponse
 */
export declare class GetExistingTransactionIndexesResponse extends Message<GetExistingTransactionIndexesResponse> {
  /**
   * @generated from field: co.topl.genus.services.IndexSpecs indexSpecs = 1;
   */
  indexSpecs?: IndexSpecs;

  constructor(data?: PartialMessage<GetExistingTransactionIndexesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GetExistingTransactionIndexesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExistingTransactionIndexesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExistingTransactionIndexesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExistingTransactionIndexesResponse;

  static equals(a: GetExistingTransactionIndexesResponse | PlainMessage<GetExistingTransactionIndexesResponse> | undefined, b: GetExistingTransactionIndexesResponse | PlainMessage<GetExistingTransactionIndexesResponse> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.BlockResponse
 */
export declare class BlockResponse extends Message<BlockResponse> {
  /**
   * @generated from field: co.topl.node.models.FullBlock block = 1;
   */
  block?: FullBlock;

  constructor(data?: PartialMessage<BlockResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.BlockResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockResponse;

  static equals(a: BlockResponse | PlainMessage<BlockResponse> | undefined, b: BlockResponse | PlainMessage<BlockResponse> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.TransactionResponse
 */
export declare class TransactionResponse extends Message<TransactionResponse> {
  /**
   * @generated from field: co.topl.genus.services.TransactionReceipt transactionReceipt = 1;
   */
  transactionReceipt?: TransactionReceipt;

  constructor(data?: PartialMessage<TransactionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.TransactionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionResponse;

  static equals(a: TransactionResponse | PlainMessage<TransactionResponse> | undefined, b: TransactionResponse | PlainMessage<TransactionResponse> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.TxoResponse
 */
export declare class TxoResponse extends Message<TxoResponse> {
  /**
   * @generated from field: co.topl.genus.services.Txo txo = 1;
   */
  txo?: Txo;

  constructor(data?: PartialMessage<TxoResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.TxoResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxoResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxoResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxoResponse;

  static equals(a: TxoResponse | PlainMessage<TxoResponse> | undefined, b: TxoResponse | PlainMessage<TxoResponse> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.GetBlockByIdRequest
 */
export declare class GetBlockByIdRequest extends Message<GetBlockByIdRequest> {
  /**
   * @generated from field: co.topl.consensus.models.BlockId blockId = 1;
   */
  blockId?: BlockId;

  /**
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<GetBlockByIdRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GetBlockByIdRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlockByIdRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlockByIdRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlockByIdRequest;

  static equals(a: GetBlockByIdRequest | PlainMessage<GetBlockByIdRequest> | undefined, b: GetBlockByIdRequest | PlainMessage<GetBlockByIdRequest> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.GetBlockByHeightRequest
 */
export declare class GetBlockByHeightRequest extends Message<GetBlockByHeightRequest> {
  /**
   * @generated from field: co.topl.genus.services.ChainDistance height = 1;
   */
  height?: ChainDistance;

  /**
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<GetBlockByHeightRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GetBlockByHeightRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlockByHeightRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlockByHeightRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlockByHeightRequest;

  static equals(a: GetBlockByHeightRequest | PlainMessage<GetBlockByHeightRequest> | undefined, b: GetBlockByHeightRequest | PlainMessage<GetBlockByHeightRequest> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.GetBlockByDepthRequest
 */
export declare class GetBlockByDepthRequest extends Message<GetBlockByDepthRequest> {
  /**
   * @generated from field: co.topl.genus.services.ChainDistance depth = 1;
   */
  depth?: ChainDistance;

  /**
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<GetBlockByDepthRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GetBlockByDepthRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlockByDepthRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlockByDepthRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlockByDepthRequest;

  static equals(a: GetBlockByDepthRequest | PlainMessage<GetBlockByDepthRequest> | undefined, b: GetBlockByDepthRequest | PlainMessage<GetBlockByDepthRequest> | undefined): boolean;
}

/**
 * Used to request a transaction by specifying its ID.
 *
 * @generated from message co.topl.genus.services.GetTransactionByIdRequest
 */
export declare class GetTransactionByIdRequest extends Message<GetTransactionByIdRequest> {
  /**
   * @generated from field: co.topl.brambl.models.TransactionId transactionId = 1;
   */
  transactionId?: TransactionId;

  /**
   * The default value for confidenceFactor is 0.9999999 (7 nines)
   *
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<GetTransactionByIdRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GetTransactionByIdRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionByIdRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionByIdRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionByIdRequest;

  static equals(a: GetTransactionByIdRequest | PlainMessage<GetTransactionByIdRequest> | undefined, b: GetTransactionByIdRequest | PlainMessage<GetTransactionByIdRequest> | undefined): boolean;
}

/**
 * Request type for NetworkMetricsService:getTxoStats
 *
 * @generated from message co.topl.genus.services.GetTxoStatsReq
 */
export declare class GetTxoStatsReq extends Message<GetTxoStatsReq> {
  constructor(data?: PartialMessage<GetTxoStatsReq>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GetTxoStatsReq";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTxoStatsReq;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTxoStatsReq;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTxoStatsReq;

  static equals(a: GetTxoStatsReq | PlainMessage<GetTxoStatsReq> | undefined, b: GetTxoStatsReq | PlainMessage<GetTxoStatsReq> | undefined): boolean;
}

/**
 * Response type for NetworkMetricsService:getTxoStats
 *
 * @generated from message co.topl.genus.services.GetTxoStatsRes
 */
export declare class GetTxoStatsRes extends Message<GetTxoStatsRes> {
  /**
   * @generated from field: co.topl.genus.services.TxoStats txos = 1;
   */
  txos?: TxoStats;

  constructor(data?: PartialMessage<GetTxoStatsRes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GetTxoStatsRes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTxoStatsRes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTxoStatsRes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTxoStatsRes;

  static equals(a: GetTxoStatsRes | PlainMessage<GetTxoStatsRes> | undefined, b: GetTxoStatsRes | PlainMessage<GetTxoStatsRes> | undefined): boolean;
}

/**
 * Request type for NetworkMetricsService:getBlockchainSizeStats
 *
 * @generated from message co.topl.genus.services.BlockchainSizeStatsReq
 */
export declare class BlockchainSizeStatsReq extends Message<BlockchainSizeStatsReq> {
  constructor(data?: PartialMessage<BlockchainSizeStatsReq>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.BlockchainSizeStatsReq";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockchainSizeStatsReq;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockchainSizeStatsReq;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockchainSizeStatsReq;

  static equals(a: BlockchainSizeStatsReq | PlainMessage<BlockchainSizeStatsReq> | undefined, b: BlockchainSizeStatsReq | PlainMessage<BlockchainSizeStatsReq> | undefined): boolean;
}

/**
 * Response type for NetworkMetricsService:getBlockchainSizeStats
 *
 * @generated from message co.topl.genus.services.BlockchainSizeStatsRes
 */
export declare class BlockchainSizeStatsRes extends Message<BlockchainSizeStatsRes> {
  /**
   * @generated from field: co.topl.genus.services.BlockchainSizeStats blockchainSize = 1;
   */
  blockchainSize?: BlockchainSizeStats;

  constructor(data?: PartialMessage<BlockchainSizeStatsRes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.BlockchainSizeStatsRes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockchainSizeStatsRes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockchainSizeStatsRes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockchainSizeStatsRes;

  static equals(a: BlockchainSizeStatsRes | PlainMessage<BlockchainSizeStatsRes> | undefined, b: BlockchainSizeStatsRes | PlainMessage<BlockchainSizeStatsRes> | undefined): boolean;
}

/**
 * Request type for NetworkMetricsService:getBlockStats
 *
 * @generated from message co.topl.genus.services.BlockStatsReq
 */
export declare class BlockStatsReq extends Message<BlockStatsReq> {
  constructor(data?: PartialMessage<BlockStatsReq>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.BlockStatsReq";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockStatsReq;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockStatsReq;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockStatsReq;

  static equals(a: BlockStatsReq | PlainMessage<BlockStatsReq> | undefined, b: BlockStatsReq | PlainMessage<BlockStatsReq> | undefined): boolean;
}

/**
 * Response type for NetworkMetricsService:getBlockStats
 *
 * @generated from message co.topl.genus.services.BlockStatsRes
 */
export declare class BlockStatsRes extends Message<BlockStatsRes> {
  /**
   * @generated from field: co.topl.genus.services.BlockStats blockStats = 1;
   */
  blockStats?: BlockStats;

  constructor(data?: PartialMessage<BlockStatsRes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.BlockStatsRes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockStatsRes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockStatsRes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockStatsRes;

  static equals(a: BlockStatsRes | PlainMessage<BlockStatsRes> | undefined, b: BlockStatsRes | PlainMessage<BlockStatsRes> | undefined): boolean;
}

/**
 * Response from CreateOnChainTransactionIndex request
 *
 * @generated from message co.topl.genus.services.CreateOnChainTransactionIndexResponse
 */
export declare class CreateOnChainTransactionIndexResponse extends Message<CreateOnChainTransactionIndexResponse> {
  /**
   * True if index was created.
   *
   * @generated from field: bool ok = 1;
   */
  ok: boolean;

  constructor(data?: PartialMessage<CreateOnChainTransactionIndexResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.CreateOnChainTransactionIndexResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOnChainTransactionIndexResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOnChainTransactionIndexResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOnChainTransactionIndexResponse;

  static equals(a: CreateOnChainTransactionIndexResponse | PlainMessage<CreateOnChainTransactionIndexResponse> | undefined, b: CreateOnChainTransactionIndexResponse | PlainMessage<CreateOnChainTransactionIndexResponse> | undefined): boolean;
}

/**
 * Used to request TxOs by their associated lock address
 *
 * @generated from message co.topl.genus.services.QueryByLockAddressRequest
 */
export declare class QueryByLockAddressRequest extends Message<QueryByLockAddressRequest> {
  /**
   * Address of interest
   *
   * @generated from field: co.topl.brambl.models.LockAddress address = 1;
   */
  address?: LockAddress;

  /**
   * The default value for confidenceFactor is 0.9999999 (7 nines)
   *
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  /**
   * Filter by status
   *
   * @generated from field: co.topl.genus.services.TxoState state = 3;
   */
  state: TxoState;

  constructor(data?: PartialMessage<QueryByLockAddressRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.QueryByLockAddressRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryByLockAddressRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryByLockAddressRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryByLockAddressRequest;

  static equals(a: QueryByLockAddressRequest | PlainMessage<QueryByLockAddressRequest> | undefined, b: QueryByLockAddressRequest | PlainMessage<QueryByLockAddressRequest> | undefined): boolean;
}

/**
 * Used to request TxOs by their asset type
 *
 * @generated from message co.topl.genus.services.QueryByAssetLabelRequest
 */
export declare class QueryByAssetLabelRequest extends Message<QueryByAssetLabelRequest> {
  /**
   * @generated from field: co.topl.genus.services.AssetLabel assetLabel = 1;
   */
  assetLabel?: AssetLabel;

  /**
   * The default value for confidenceFactor is 0.9999999 (7 nines)
   *
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<QueryByAssetLabelRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.QueryByAssetLabelRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryByAssetLabelRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryByAssetLabelRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryByAssetLabelRequest;

  static equals(a: QueryByAssetLabelRequest | PlainMessage<QueryByAssetLabelRequest> | undefined, b: QueryByAssetLabelRequest | PlainMessage<QueryByAssetLabelRequest> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.TxoLockAddressResponse
 */
export declare class TxoLockAddressResponse extends Message<TxoLockAddressResponse> {
  /**
   * @generated from field: repeated co.topl.genus.services.Txo Txos = 1;
   */
  Txos: Txo[];

  constructor(data?: PartialMessage<TxoLockAddressResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.TxoLockAddressResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxoLockAddressResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxoLockAddressResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxoLockAddressResponse;

  static equals(a: TxoLockAddressResponse | PlainMessage<TxoLockAddressResponse> | undefined, b: TxoLockAddressResponse | PlainMessage<TxoLockAddressResponse> | undefined): boolean;
}

/**
 * A request to create an index of transactions based on their on-chain data
 *
 * @generated from message co.topl.genus.services.CreateOnChainTransactionIndexRequest
 */
export declare class CreateOnChainTransactionIndexRequest extends Message<CreateOnChainTransactionIndexRequest> {
  /**
   * @generated from field: co.topl.genus.services.IndexSpec indexSpec = 1;
   */
  indexSpec?: IndexSpec;

  /**
   * If populate is true, then scan the existing transaction in the database to populate the index.
   *
   * @generated from field: bool populate = 2;
   */
  populate: boolean;

  constructor(data?: PartialMessage<CreateOnChainTransactionIndexRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.CreateOnChainTransactionIndexRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOnChainTransactionIndexRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOnChainTransactionIndexRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOnChainTransactionIndexRequest;

  static equals(a: CreateOnChainTransactionIndexRequest | PlainMessage<CreateOnChainTransactionIndexRequest> | undefined, b: CreateOnChainTransactionIndexRequest | PlainMessage<CreateOnChainTransactionIndexRequest> | undefined): boolean;
}

/**
 * Used to request a group policy associated by groupId
 *
 * @generated from message co.topl.genus.services.QueryByGroupIdRequest
 */
export declare class QueryByGroupIdRequest extends Message<QueryByGroupIdRequest> {
  /**
   * GroupId of interest
   *
   * @generated from field: co.topl.brambl.models.GroupId groupId = 1;
   */
  groupId?: GroupId;

  constructor(data?: PartialMessage<QueryByGroupIdRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.QueryByGroupIdRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryByGroupIdRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryByGroupIdRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryByGroupIdRequest;

  static equals(a: QueryByGroupIdRequest | PlainMessage<QueryByGroupIdRequest> | undefined, b: QueryByGroupIdRequest | PlainMessage<QueryByGroupIdRequest> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.GroupPolicyResponse
 */
export declare class GroupPolicyResponse extends Message<GroupPolicyResponse> {
  /**
   * @generated from field: co.topl.brambl.models.Event.GroupPolicy groupPolicy = 1;
   */
  groupPolicy?: Event_GroupPolicy;

  constructor(data?: PartialMessage<GroupPolicyResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GroupPolicyResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupPolicyResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupPolicyResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupPolicyResponse;

  static equals(a: GroupPolicyResponse | PlainMessage<GroupPolicyResponse> | undefined, b: GroupPolicyResponse | PlainMessage<GroupPolicyResponse> | undefined): boolean;
}

/**
 * Used to request a series policy associated by seriesId
 *
 * @generated from message co.topl.genus.services.QueryBySeriesIdRequest
 */
export declare class QueryBySeriesIdRequest extends Message<QueryBySeriesIdRequest> {
  /**
   * GroupId of interest
   *
   * @generated from field: co.topl.brambl.models.SeriesId seriesId = 1;
   */
  seriesId?: SeriesId;

  constructor(data?: PartialMessage<QueryBySeriesIdRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.QueryBySeriesIdRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBySeriesIdRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBySeriesIdRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBySeriesIdRequest;

  static equals(a: QueryBySeriesIdRequest | PlainMessage<QueryBySeriesIdRequest> | undefined, b: QueryBySeriesIdRequest | PlainMessage<QueryBySeriesIdRequest> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.SeriesPolicyResponse
 */
export declare class SeriesPolicyResponse extends Message<SeriesPolicyResponse> {
  /**
   * @generated from field: co.topl.brambl.models.Event.SeriesPolicy seriesPolicy = 1;
   */
  seriesPolicy?: Event_SeriesPolicy;

  constructor(data?: PartialMessage<SeriesPolicyResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.SeriesPolicyResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeriesPolicyResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeriesPolicyResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeriesPolicyResponse;

  static equals(a: SeriesPolicyResponse | PlainMessage<SeriesPolicyResponse> | undefined, b: SeriesPolicyResponse | PlainMessage<SeriesPolicyResponse> | undefined): boolean;
}

/**
 * Definitions of existing database indexes.
 *
 * @generated from message co.topl.genus.services.IndexSpecs
 */
export declare class IndexSpecs extends Message<IndexSpecs> {
  /**
   * @generated from field: repeated co.topl.genus.services.IndexSpec indexSpec = 1;
   */
  indexSpec: IndexSpec[];

  constructor(data?: PartialMessage<IndexSpecs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.IndexSpecs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexSpecs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexSpecs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexSpecs;

  static equals(a: IndexSpecs | PlainMessage<IndexSpecs> | undefined, b: IndexSpecs | PlainMessage<IndexSpecs> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.IndexDef
 */
export declare class IndexDef extends Message<IndexDef> {
  /**
   * @generated from oneof co.topl.genus.services.IndexDef.xdev
   */
  xdev: {
    /**
     * @generated from field: co.topl.genus.services.CreateOnChainTransactionIndexRequest onChain = 1;
     */
    value: CreateOnChainTransactionIndexRequest;
    case: "onChain";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<IndexDef>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.IndexDef";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexDef;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexDef;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexDef;

  static equals(a: IndexDef | PlainMessage<IndexDef> | undefined, b: IndexDef | PlainMessage<IndexDef> | undefined): boolean;
}

/**
 * The message that is sent when requesting information about the existing Genus indexes
 *
 * @generated from message co.topl.genus.services.GetExistingTransactionIndexesRequest
 */
export declare class GetExistingTransactionIndexesRequest extends Message<GetExistingTransactionIndexesRequest> {
  constructor(data?: PartialMessage<GetExistingTransactionIndexesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GetExistingTransactionIndexesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExistingTransactionIndexesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExistingTransactionIndexesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExistingTransactionIndexesRequest;

  static equals(a: GetExistingTransactionIndexesRequest | PlainMessage<GetExistingTransactionIndexesRequest> | undefined, b: GetExistingTransactionIndexesRequest | PlainMessage<GetExistingTransactionIndexesRequest> | undefined): boolean;
}

/**
 * Specify the name of an index to be dropped
 *
 * @generated from message co.topl.genus.services.DropIndexRequest
 */
export declare class DropIndexRequest extends Message<DropIndexRequest> {
  /**
   * @generated from field: string indexName = 1;
   */
  indexName: string;

  constructor(data?: PartialMessage<DropIndexRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.DropIndexRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DropIndexRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DropIndexRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DropIndexRequest;

  static equals(a: DropIndexRequest | PlainMessage<DropIndexRequest> | undefined, b: DropIndexRequest | PlainMessage<DropIndexRequest> | undefined): boolean;
}

/**
 * Return true if the requested index was dropped or false if it was not (Most likely because it did not exist).
 *
 * @generated from message co.topl.genus.services.DropIndexResponse
 */
export declare class DropIndexResponse extends Message<DropIndexResponse> {
  /**
   * @generated from field: bool dropped = 1;
   */
  dropped: boolean;

  constructor(data?: PartialMessage<DropIndexResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.DropIndexResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DropIndexResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DropIndexResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DropIndexResponse;

  static equals(a: DropIndexResponse | PlainMessage<DropIndexResponse> | undefined, b: DropIndexResponse | PlainMessage<DropIndexResponse> | undefined): boolean;
}

/**
 * Request the use of a named index to find transactions containing data that matches specified values.
 *
 * @generated from message co.topl.genus.services.GetIndexedTransactionsRequest
 */
export declare class GetIndexedTransactionsRequest extends Message<GetIndexedTransactionsRequest> {
  /**
   * The name of the index to search
   *
   * @generated from field: string indexName = 1;
   */
  indexName: string;

  /**
   * The index value(s) to search for.
   *
   * @generated from field: repeated co.topl.genus.services.IndexMatchValue value = 2;
   */
  value: IndexMatchValue[];

  /**
   * The maximum number of transactions to be returned
   *
   * @generated from field: uint32 maxResults = 3;
   */
  maxResults: number;

  /**
   * A number of transactions to be skipped. This is useful for paging results.
   *
   * @generated from field: uint64 skipResults = 4;
   */
  skipResults: bigint;

  constructor(data?: PartialMessage<GetIndexedTransactionsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.GetIndexedTransactionsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIndexedTransactionsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIndexedTransactionsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIndexedTransactionsRequest;

  static equals(a: GetIndexedTransactionsRequest | PlainMessage<GetIndexedTransactionsRequest> | undefined, b: GetIndexedTransactionsRequest | PlainMessage<GetIndexedTransactionsRequest> | undefined): boolean;
}

/**
 * A value that may match a field in an index.
 *
 * @generated from message co.topl.genus.services.IndexMatchValue
 */
export declare class IndexMatchValue extends Message<IndexMatchValue> {
  /**
   * @generated from oneof co.topl.genus.services.IndexMatchValue.value
   */
  value: {
    /**
     * @generated from field: string stringValue = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: int64 intValue = 2;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * @generated from field: uint64 uintValue = 3;
     */
    value: bigint;
    case: "uintValue";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: google.protobuf.StringValue fieldName = 4;
   */
  fieldName?: string;

  constructor(data?: PartialMessage<IndexMatchValue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.IndexMatchValue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexMatchValue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexMatchValue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexMatchValue;

  static equals(a: IndexMatchValue | PlainMessage<IndexMatchValue> | undefined, b: IndexMatchValue | PlainMessage<IndexMatchValue> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.TxoStats
 */
export declare class TxoStats extends Message<TxoStats> {
  /**
   * @generated from field: uint64 spent = 1;
   */
  spent: bigint;

  /**
   * @generated from field: uint64 unspent = 2;
   */
  unspent: bigint;

  /**
   * @generated from field: uint64 pending = 4;
   */
  pending: bigint;

  /**
   * @generated from field: uint64 total = 5;
   */
  total: bigint;

  constructor(data?: PartialMessage<TxoStats>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.TxoStats";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxoStats;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxoStats;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxoStats;

  static equals(a: TxoStats | PlainMessage<TxoStats> | undefined, b: TxoStats | PlainMessage<TxoStats> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.BlockchainSizeStats
 */
export declare class BlockchainSizeStats extends Message<BlockchainSizeStats> {
  /**
   * Sum of BlockHeader immutable bytes
   *
   * @generated from field: uint64 blockHeaderBytes = 1;
   */
  blockHeaderBytes: bigint;

  /**
   * Sum of Transaction immutable bytes
   *
   * @generated from field: uint64 transactionBytes = 2;
   */
  transactionBytes: bigint;

  constructor(data?: PartialMessage<BlockchainSizeStats>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.BlockchainSizeStats";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockchainSizeStats;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockchainSizeStats;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockchainSizeStats;

  static equals(a: BlockchainSizeStats | PlainMessage<BlockchainSizeStats> | undefined, b: BlockchainSizeStats | PlainMessage<BlockchainSizeStats> | undefined): boolean;
}

/**
 * @generated from message co.topl.genus.services.BlockStats
 */
export declare class BlockStats extends Message<BlockStats> {
  /**
   * Sum of empty Blocks, total blocks without transactions in them
   *
   * @generated from field: uint64 empty = 1;
   */
  empty: bigint;

  /**
   * Sum of nonEmpty, total blocks with transactions in them
   *
   * @generated from field: uint64 nonEmpty = 2;
   */
  nonEmpty: bigint;

  constructor(data?: PartialMessage<BlockStats>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.genus.services.BlockStats";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockStats;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockStats;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockStats;

  static equals(a: BlockStats | PlainMessage<BlockStats> | undefined, b: BlockStats | PlainMessage<BlockStats> | undefined): boolean;
}

