// @generated by protoc-gen-es v1.8.0
// @generated from file genus/genus_rpc.proto (package co.topl.genus.services, syntax proto3)
/* eslint-disable */
// @ts-nocheck

///////////////////////////////////////////////////////////////////////////////
// Services provided by Genus
///////////////////////////////////////////////////////////////////////////////

import { proto3, StringValue } from "@bufbuild/protobuf";
import { FullBlock } from "../node/models/block_pb.js";
import { AssetLabel, ChainDistance, ConfidenceFactor, IndexSpec, TransactionReceipt, Txo, TxoState } from "./genus_models_pb.js";
import { BlockId } from "../consensus/models/block_id_pb.js";
import { GroupId, SeriesId, TransactionId } from "../brambl/models/identifier_pb.js";
import { LockAddress } from "../brambl/models/address_pb.js";
import { Event_GroupPolicy, Event_SeriesPolicy } from "../brambl/models/event_pb.js";

/**
 * @generated from message co.topl.genus.services.GetExistingTransactionIndexesResponse
 */
export const GetExistingTransactionIndexesResponse = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GetExistingTransactionIndexesResponse",
  () => [
    { no: 1, name: "indexSpecs", kind: "message", T: IndexSpecs },
  ],
);

/**
 * @generated from message co.topl.genus.services.BlockResponse
 */
export const BlockResponse = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.BlockResponse",
  () => [
    { no: 1, name: "block", kind: "message", T: FullBlock },
  ],
);

/**
 * @generated from message co.topl.genus.services.TransactionResponse
 */
export const TransactionResponse = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.TransactionResponse",
  () => [
    { no: 1, name: "transactionReceipt", kind: "message", T: TransactionReceipt },
  ],
);

/**
 * @generated from message co.topl.genus.services.TxoResponse
 */
export const TxoResponse = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.TxoResponse",
  () => [
    { no: 1, name: "txo", kind: "message", T: Txo },
  ],
);

/**
 * @generated from message co.topl.genus.services.GetBlockByIdRequest
 */
export const GetBlockByIdRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GetBlockByIdRequest",
  () => [
    { no: 1, name: "blockId", kind: "message", T: BlockId },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ],
);

/**
 * @generated from message co.topl.genus.services.GetBlockByHeightRequest
 */
export const GetBlockByHeightRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GetBlockByHeightRequest",
  () => [
    { no: 1, name: "height", kind: "message", T: ChainDistance },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ],
);

/**
 * @generated from message co.topl.genus.services.GetBlockByDepthRequest
 */
export const GetBlockByDepthRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GetBlockByDepthRequest",
  () => [
    { no: 1, name: "depth", kind: "message", T: ChainDistance },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ],
);

/**
 * Used to request a transaction by specifying its ID.
 *
 * @generated from message co.topl.genus.services.GetTransactionByIdRequest
 */
export const GetTransactionByIdRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GetTransactionByIdRequest",
  () => [
    { no: 1, name: "transactionId", kind: "message", T: TransactionId },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ],
);

/**
 * Request type for NetworkMetricsService:getTxoStats
 *
 * @generated from message co.topl.genus.services.GetTxoStatsReq
 */
export const GetTxoStatsReq = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GetTxoStatsReq",
  [],
);

/**
 * Response type for NetworkMetricsService:getTxoStats
 *
 * @generated from message co.topl.genus.services.GetTxoStatsRes
 */
export const GetTxoStatsRes = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GetTxoStatsRes",
  () => [
    { no: 1, name: "txos", kind: "message", T: TxoStats },
  ],
);

/**
 * Request type for NetworkMetricsService:getBlockchainSizeStats
 *
 * @generated from message co.topl.genus.services.BlockchainSizeStatsReq
 */
export const BlockchainSizeStatsReq = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.BlockchainSizeStatsReq",
  [],
);

/**
 * Response type for NetworkMetricsService:getBlockchainSizeStats
 *
 * @generated from message co.topl.genus.services.BlockchainSizeStatsRes
 */
export const BlockchainSizeStatsRes = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.BlockchainSizeStatsRes",
  () => [
    { no: 1, name: "blockchainSize", kind: "message", T: BlockchainSizeStats },
  ],
);

/**
 * Request type for NetworkMetricsService:getBlockStats
 *
 * @generated from message co.topl.genus.services.BlockStatsReq
 */
export const BlockStatsReq = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.BlockStatsReq",
  [],
);

/**
 * Response type for NetworkMetricsService:getBlockStats
 *
 * @generated from message co.topl.genus.services.BlockStatsRes
 */
export const BlockStatsRes = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.BlockStatsRes",
  () => [
    { no: 1, name: "blockStats", kind: "message", T: BlockStats },
  ],
);

/**
 * Response from CreateOnChainTransactionIndex request
 *
 * @generated from message co.topl.genus.services.CreateOnChainTransactionIndexResponse
 */
export const CreateOnChainTransactionIndexResponse = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.CreateOnChainTransactionIndexResponse",
  () => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Used to request TxOs by their associated lock address
 *
 * @generated from message co.topl.genus.services.QueryByLockAddressRequest
 */
export const QueryByLockAddressRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.QueryByLockAddressRequest",
  () => [
    { no: 1, name: "address", kind: "message", T: LockAddress },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(TxoState) },
  ],
);

/**
 * Used to request TxOs by their asset type
 *
 * @generated from message co.topl.genus.services.QueryByAssetLabelRequest
 */
export const QueryByAssetLabelRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.QueryByAssetLabelRequest",
  () => [
    { no: 1, name: "assetLabel", kind: "message", T: AssetLabel },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ],
);

/**
 * @generated from message co.topl.genus.services.TxoLockAddressResponse
 */
export const TxoLockAddressResponse = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.TxoLockAddressResponse",
  () => [
    { no: 1, name: "Txos", kind: "message", T: Txo, repeated: true },
  ],
);

/**
 * A request to create an index of transactions based on their on-chain data
 *
 * @generated from message co.topl.genus.services.CreateOnChainTransactionIndexRequest
 */
export const CreateOnChainTransactionIndexRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.CreateOnChainTransactionIndexRequest",
  () => [
    { no: 1, name: "indexSpec", kind: "message", T: IndexSpec },
    { no: 2, name: "populate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Used to request a group policy associated by groupId
 *
 * @generated from message co.topl.genus.services.QueryByGroupIdRequest
 */
export const QueryByGroupIdRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.QueryByGroupIdRequest",
  () => [
    { no: 1, name: "groupId", kind: "message", T: GroupId },
  ],
);

/**
 * @generated from message co.topl.genus.services.GroupPolicyResponse
 */
export const GroupPolicyResponse = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GroupPolicyResponse",
  () => [
    { no: 1, name: "groupPolicy", kind: "message", T: Event_GroupPolicy },
  ],
);

/**
 * Used to request a series policy associated by seriesId
 *
 * @generated from message co.topl.genus.services.QueryBySeriesIdRequest
 */
export const QueryBySeriesIdRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.QueryBySeriesIdRequest",
  () => [
    { no: 1, name: "seriesId", kind: "message", T: SeriesId },
  ],
);

/**
 * @generated from message co.topl.genus.services.SeriesPolicyResponse
 */
export const SeriesPolicyResponse = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.SeriesPolicyResponse",
  () => [
    { no: 1, name: "seriesPolicy", kind: "message", T: Event_SeriesPolicy },
  ],
);

/**
 * Definitions of existing database indexes.
 *
 * @generated from message co.topl.genus.services.IndexSpecs
 */
export const IndexSpecs = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.IndexSpecs",
  () => [
    { no: 1, name: "indexSpec", kind: "message", T: IndexSpec, repeated: true },
  ],
);

/**
 * @generated from message co.topl.genus.services.IndexDef
 */
export const IndexDef = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.IndexDef",
  () => [
    { no: 1, name: "onChain", kind: "message", T: CreateOnChainTransactionIndexRequest, oneof: "xdev" },
  ],
);

/**
 * The message that is sent when requesting information about the existing Genus indexes
 *
 * @generated from message co.topl.genus.services.GetExistingTransactionIndexesRequest
 */
export const GetExistingTransactionIndexesRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GetExistingTransactionIndexesRequest",
  [],
);

/**
 * Specify the name of an index to be dropped
 *
 * @generated from message co.topl.genus.services.DropIndexRequest
 */
export const DropIndexRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.DropIndexRequest",
  () => [
    { no: 1, name: "indexName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Return true if the requested index was dropped or false if it was not (Most likely because it did not exist).
 *
 * @generated from message co.topl.genus.services.DropIndexResponse
 */
export const DropIndexResponse = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.DropIndexResponse",
  () => [
    { no: 1, name: "dropped", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Request the use of a named index to find transactions containing data that matches specified values.
 *
 * @generated from message co.topl.genus.services.GetIndexedTransactionsRequest
 */
export const GetIndexedTransactionsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.GetIndexedTransactionsRequest",
  () => [
    { no: 1, name: "indexName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: IndexMatchValue, repeated: true },
    { no: 3, name: "maxResults", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "skipResults", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * A value that may match a field in an index.
 *
 * @generated from message co.topl.genus.services.IndexMatchValue
 */
export const IndexMatchValue = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.IndexMatchValue",
  () => [
    { no: 1, name: "stringValue", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "intValue", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 3, name: "uintValue", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "value" },
    { no: 4, name: "fieldName", kind: "message", T: StringValue },
  ],
);

/**
 * @generated from message co.topl.genus.services.TxoStats
 */
export const TxoStats = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.TxoStats",
  () => [
    { no: 1, name: "spent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "unspent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "pending", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message co.topl.genus.services.BlockchainSizeStats
 */
export const BlockchainSizeStats = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.BlockchainSizeStats",
  () => [
    { no: 1, name: "blockHeaderBytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "transactionBytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message co.topl.genus.services.BlockStats
 */
export const BlockStats = /*@__PURE__*/ proto3.makeMessageType(
  "co.topl.genus.services.BlockStats",
  () => [
    { no: 1, name: "empty", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "nonEmpty", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

