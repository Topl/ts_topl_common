// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file genus/genus_rpc.proto (package co.topl.genus.services, syntax proto3)
/* eslint-disable */
// @ts-nocheck

///////////////////////////////////////////////////////////////////////////////
// Services provided by Genus
///////////////////////////////////////////////////////////////////////////////

import { BlockchainSizeStatsReq, BlockchainSizeStatsRes, BlockResponse, BlockStatsReq, BlockStatsRes, CreateOnChainTransactionIndexRequest, CreateOnChainTransactionIndexResponse, DropIndexRequest, DropIndexResponse, GetBlockByDepthRequest, GetBlockByHeightRequest, GetBlockByIdRequest, GetExistingTransactionIndexesRequest, GetExistingTransactionIndexesResponse, GetIndexedTransactionsRequest, GetTransactionByIdRequest, GetTxoStatsReq, GetTxoStatsRes, GroupPolicyResponse, QueryByAssetLabelRequest, QueryByGroupIdRequest, QueryByLockAddressRequest, QueryBySeriesIdRequest, SeriesPolicyResponse, TransactionResponse, TxoLockAddressResponse, TxoResponse } from "./genus_rpc_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Operations related to blocks
 *
 * @generated from service co.topl.genus.services.BlockService
 */
export const BlockService = {
  typeName: "co.topl.genus.services.BlockService",
  methods: {
    /**
     * Retrieve a block with the specified `id` from the configured Genus service. This returns its result when there is a
     * block present in the genus service with the specified id and the confidence factor of the block is greater than or
     * equal to the value of the `confidenceFactor` parameter.
     *
     * @generated from rpc co.topl.genus.services.BlockService.getBlockById
     */
    getBlockById: {
      name: "getBlockById",
      I: GetBlockByIdRequest,
      O: BlockResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Retrieve the block at the specified height from the configured Genus service, where the height of the genesis block
     * is 1. This returns a result when there is a block present in the genus service at the specified height and the
     * confidence factor of the block is greater than or equal to the value of the `confidenceFactor` parameter.
     *
     * @generated from rpc co.topl.genus.services.BlockService.getBlockByHeight
     */
    getBlockByHeight: {
      name: "getBlockByHeight",
      I: GetBlockByHeightRequest,
      O: BlockResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Retrieve the block at the specified depth from the configured Genus service. This returns its result immediately.
     * The block at depth 1 is the highest block with a confidence factor that is greater than or
     * equal to the value of the `confidenceFactor` parameter.
     *
     * Since blocks keep getting added, we expect that multiple calls to this with the same argument will return different blocks.
     *
     * @generated from rpc co.topl.genus.services.BlockService.getBlockByDepth
     */
    getBlockByDepth: {
      name: "getBlockByDepth",
      I: GetBlockByDepthRequest,
      O: BlockResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * Operations related to GenusBlock contents
 *
 * @generated from service co.topl.genus.services.TransactionService
 */
export const TransactionService = {
  typeName: "co.topl.genus.services.TransactionService",
  methods: {
    /**
     * Retrieve a transaction with the specified `id` from the configured Genus service. This returns its result when there is
     * a transaction present in the genus service with the specified id and the confidence factor of the block that contains
     * the transaction is greater than or equal to the value of the `confidenceFactor` parameter.
     *
     * @generated from rpc co.topl.genus.services.TransactionService.getTransactionById
     */
    getTransactionById: {
      name: "getTransactionById",
      I: GetTransactionByIdRequest,
      O: TransactionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Retrieve transactions that have an input or output associated with any of the specified addresses from the configured
     * Genus service. This returns a stream of existing and future transactions from the genus service with the specified id
     * that are in a block with confidence factor greater than or equal to the value of the `confidenceFactor` parameter.
     *
     * @generated from rpc co.topl.genus.services.TransactionService.getTransactionByLockAddressStream
     */
    getTransactionByLockAddressStream: {
      name: "getTransactionByLockAddressStream",
      I: QueryByLockAddressRequest,
      O: TransactionResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Retrieve from the configured Genus service TxOs (spent or unspent) that are associated with any of the specified
     * addresses and are in a block whose confidence factor is greater than or equal to the value of the `confidenceFactor`
     * parameter. This returns immediately.
     *
     * @generated from rpc co.topl.genus.services.TransactionService.getTxosByLockAddress
     */
    getTxosByLockAddress: {
      name: "getTxosByLockAddress",
      I: QueryByLockAddressRequest,
      O: TxoLockAddressResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Retrieve from the configured Genus service TxOs (spent or unspent) that are associated with any of the specified
     * addresses and are in a block whose confidence factor is greater than or equal to the value of the `confidenceFactor`
     * parameter. As new TxOs are added or UTxOs are spent that match the request, additional results are returned.
     *
     * @generated from rpc co.topl.genus.services.TransactionService.getTxosByLockAddressStream
     */
    getTxosByLockAddressStream: {
      name: "getTxosByLockAddressStream",
      I: QueryByLockAddressRequest,
      O: TxoLockAddressResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Retrieve from the configured Genus service TxOs (spent or unspent) that contain the type of asset specified by the
     * asset label and are in a block whose confidence factor is greater than or equal to the value of the `confidenceFactor`
     * parameter. As new TxOs are added or UTxOs are spent that match the request, additional results are returned.
     *
     * @generated from rpc co.topl.genus.services.TransactionService.getTxosByAssetLabel
     */
    getTxosByAssetLabel: {
      name: "getTxosByAssetLabel",
      I: QueryByAssetLabelRequest,
      O: TxoResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Create an index on transactions in the Genus database. The index will allow transactions to be found quickly based on
     * the contents of their data field.
     *
     * This returns as soon as the index is created. After the index is created, if the `populate` parameter is true then Genus
     * will asynchronously populate the index.
     *
     * @generated from rpc co.topl.genus.services.TransactionService.createOnChainTransactionIndex
     */
    createOnChainTransactionIndex: {
      name: "createOnChainTransactionIndex",
      I: CreateOnChainTransactionIndexRequest,
      O: CreateOnChainTransactionIndexResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Return a collection of `IndexSpec` objects, where each `IndexSpec` object corresponds to an index in the Genus database.
     * The content of each `IndexSpec` object is the same as the `IndexSpec ` object used to create the index.
     *
     * @generated from rpc co.topl.genus.services.TransactionService.getExistingTransactionIndexes
     */
    getExistingTransactionIndexes: {
      name: "getExistingTransactionIndexes",
      I: GetExistingTransactionIndexesRequest,
      O: GetExistingTransactionIndexesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Retrieve transactions that are included in the named index. If the `keys` parameter is supplied, then only transactions
     * whose index records match the specified key values are included in the result.
     *
     * @generated from rpc co.topl.genus.services.TransactionService.getIndexedTransactions
     */
    getIndexedTransactions: {
      name: "getIndexedTransactions",
      I: GetIndexedTransactionsRequest,
      O: TransactionResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Delete an index from the Genus database.
     *
     * @generated from rpc co.topl.genus.services.TransactionService.dropIndex
     */
    dropIndex: {
      name: "dropIndex",
      I: DropIndexRequest,
      O: DropIndexResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * Operations related to Network Metrics
 *
 * @generated from service co.topl.genus.services.NetworkMetricsService
 */
export const NetworkMetricsService = {
  typeName: "co.topl.genus.services.NetworkMetricsService",
  methods: {
    /**
     * Retrieve Txo Stats
     *
     * @generated from rpc co.topl.genus.services.NetworkMetricsService.getTxoStats
     */
    getTxoStats: {
      name: "getTxoStats",
      I: GetTxoStatsReq,
      O: GetTxoStatsRes,
      kind: MethodKind.Unary,
    },
    /**
     * Retrieve Blockchain Size Stats
     *
     * @generated from rpc co.topl.genus.services.NetworkMetricsService.getBlockchainSizeStats
     */
    getBlockchainSizeStats: {
      name: "getBlockchainSizeStats",
      I: BlockchainSizeStatsReq,
      O: BlockchainSizeStatsRes,
      kind: MethodKind.Unary,
    },
    /**
     * Retrieve Block Stats
     *
     * @generated from rpc co.topl.genus.services.NetworkMetricsService.getBlockStats
     */
    getBlockStats: {
      name: "getBlockStats",
      I: BlockStatsReq,
      O: BlockStatsRes,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * Operations related to Value specifics Items. Value: TOPL, LVL,...
 *
 * @generated from service co.topl.genus.services.TokenService
 */
export const TokenService = {
  typeName: "co.topl.genus.services.TokenService",
  methods: {
    /**
     * Retrieve a group Policy with the specified `id` from the configured Genus service
     *
     * @generated from rpc co.topl.genus.services.TokenService.getGroupPolicy
     */
    getGroupPolicy: {
      name: "getGroupPolicy",
      I: QueryByGroupIdRequest,
      O: GroupPolicyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Retrieve a series Policy with the specified `id` from the configured Genus service
     *
     * @generated from rpc co.topl.genus.services.TokenService.getSeriesPolicy
     */
    getSeriesPolicy: {
      name: "getSeriesPolicy",
      I: QueryBySeriesIdRequest,
      O: SeriesPolicyResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

