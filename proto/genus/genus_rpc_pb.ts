// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file genus/genus_rpc.proto (package co.topl.genus.services, syntax proto3)
/* eslint-disable */
// @ts-nocheck

///////////////////////////////////////////////////////////////////////////////
// Services provided by Genus
///////////////////////////////////////////////////////////////////////////////

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, StringValue } from "@bufbuild/protobuf";
import { FullBlock } from "../node/models/block_pb.js";
import { AssetLabel, ChainDistance, ConfidenceFactor, IndexSpec, TransactionReceipt, Txo, TxoState } from "./genus_models_pb.js";
import { BlockId } from "../consensus/models/block_id_pb.js";
import { GroupId, SeriesId, TransactionId } from "../brambl/models/identifier_pb.js";
import { LockAddress } from "../brambl/models/address_pb.js";
import { Event_GroupPolicy, Event_SeriesPolicy } from "../brambl/models/event_pb.js";

/**
 * @generated from message co.topl.genus.services.GetExistingTransactionIndexesResponse
 */
export class GetExistingTransactionIndexesResponse extends Message<GetExistingTransactionIndexesResponse> {
  /**
   * @generated from field: co.topl.genus.services.IndexSpecs indexSpecs = 1;
   */
  indexSpecs?: IndexSpecs;

  constructor(data?: PartialMessage<GetExistingTransactionIndexesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GetExistingTransactionIndexesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "indexSpecs", kind: "message", T: IndexSpecs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExistingTransactionIndexesResponse {
    return new GetExistingTransactionIndexesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExistingTransactionIndexesResponse {
    return new GetExistingTransactionIndexesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExistingTransactionIndexesResponse {
    return new GetExistingTransactionIndexesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetExistingTransactionIndexesResponse | PlainMessage<GetExistingTransactionIndexesResponse> | undefined, b: GetExistingTransactionIndexesResponse | PlainMessage<GetExistingTransactionIndexesResponse> | undefined): boolean {
    return proto3.util.equals(GetExistingTransactionIndexesResponse, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.BlockResponse
 */
export class BlockResponse extends Message<BlockResponse> {
  /**
   * @generated from field: co.topl.node.models.FullBlock block = 1;
   */
  block?: FullBlock;

  constructor(data?: PartialMessage<BlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.BlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block", kind: "message", T: FullBlock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockResponse {
    return new BlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockResponse {
    return new BlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockResponse {
    return new BlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BlockResponse | PlainMessage<BlockResponse> | undefined, b: BlockResponse | PlainMessage<BlockResponse> | undefined): boolean {
    return proto3.util.equals(BlockResponse, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.TransactionResponse
 */
export class TransactionResponse extends Message<TransactionResponse> {
  /**
   * @generated from field: co.topl.genus.services.TransactionReceipt transactionReceipt = 1;
   */
  transactionReceipt?: TransactionReceipt;

  constructor(data?: PartialMessage<TransactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.TransactionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactionReceipt", kind: "message", T: TransactionReceipt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionResponse {
    return new TransactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionResponse {
    return new TransactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionResponse {
    return new TransactionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionResponse | PlainMessage<TransactionResponse> | undefined, b: TransactionResponse | PlainMessage<TransactionResponse> | undefined): boolean {
    return proto3.util.equals(TransactionResponse, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.TxoResponse
 */
export class TxoResponse extends Message<TxoResponse> {
  /**
   * @generated from field: co.topl.genus.services.Txo txo = 1;
   */
  txo?: Txo;

  constructor(data?: PartialMessage<TxoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.TxoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "txo", kind: "message", T: Txo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxoResponse {
    return new TxoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxoResponse {
    return new TxoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxoResponse {
    return new TxoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TxoResponse | PlainMessage<TxoResponse> | undefined, b: TxoResponse | PlainMessage<TxoResponse> | undefined): boolean {
    return proto3.util.equals(TxoResponse, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.GetBlockByIdRequest
 */
export class GetBlockByIdRequest extends Message<GetBlockByIdRequest> {
  /**
   * @generated from field: co.topl.consensus.models.BlockId blockId = 1;
   */
  blockId?: BlockId;

  /**
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<GetBlockByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GetBlockByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blockId", kind: "message", T: BlockId },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlockByIdRequest {
    return new GetBlockByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlockByIdRequest {
    return new GetBlockByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlockByIdRequest {
    return new GetBlockByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlockByIdRequest | PlainMessage<GetBlockByIdRequest> | undefined, b: GetBlockByIdRequest | PlainMessage<GetBlockByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetBlockByIdRequest, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.GetBlockByHeightRequest
 */
export class GetBlockByHeightRequest extends Message<GetBlockByHeightRequest> {
  /**
   * @generated from field: co.topl.genus.services.ChainDistance height = 1;
   */
  height?: ChainDistance;

  /**
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<GetBlockByHeightRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GetBlockByHeightRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "message", T: ChainDistance },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlockByHeightRequest {
    return new GetBlockByHeightRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlockByHeightRequest {
    return new GetBlockByHeightRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlockByHeightRequest {
    return new GetBlockByHeightRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlockByHeightRequest | PlainMessage<GetBlockByHeightRequest> | undefined, b: GetBlockByHeightRequest | PlainMessage<GetBlockByHeightRequest> | undefined): boolean {
    return proto3.util.equals(GetBlockByHeightRequest, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.GetBlockByDepthRequest
 */
export class GetBlockByDepthRequest extends Message<GetBlockByDepthRequest> {
  /**
   * @generated from field: co.topl.genus.services.ChainDistance depth = 1;
   */
  depth?: ChainDistance;

  /**
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<GetBlockByDepthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GetBlockByDepthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depth", kind: "message", T: ChainDistance },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlockByDepthRequest {
    return new GetBlockByDepthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlockByDepthRequest {
    return new GetBlockByDepthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlockByDepthRequest {
    return new GetBlockByDepthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlockByDepthRequest | PlainMessage<GetBlockByDepthRequest> | undefined, b: GetBlockByDepthRequest | PlainMessage<GetBlockByDepthRequest> | undefined): boolean {
    return proto3.util.equals(GetBlockByDepthRequest, a, b);
  }
}

/**
 * Used to request a transaction by specifying its ID.
 *
 * @generated from message co.topl.genus.services.GetTransactionByIdRequest
 */
export class GetTransactionByIdRequest extends Message<GetTransactionByIdRequest> {
  /**
   * @generated from field: co.topl.brambl.models.TransactionId transactionId = 1;
   */
  transactionId?: TransactionId;

  /**
   * The default value for confidenceFactor is 0.9999999 (7 nines)
   *
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<GetTransactionByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GetTransactionByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactionId", kind: "message", T: TransactionId },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionByIdRequest {
    return new GetTransactionByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionByIdRequest {
    return new GetTransactionByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionByIdRequest {
    return new GetTransactionByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransactionByIdRequest | PlainMessage<GetTransactionByIdRequest> | undefined, b: GetTransactionByIdRequest | PlainMessage<GetTransactionByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetTransactionByIdRequest, a, b);
  }
}

/**
 * Request type for NetworkMetricsService:getTxoStats
 *
 * @generated from message co.topl.genus.services.GetTxoStatsReq
 */
export class GetTxoStatsReq extends Message<GetTxoStatsReq> {
  constructor(data?: PartialMessage<GetTxoStatsReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GetTxoStatsReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTxoStatsReq {
    return new GetTxoStatsReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTxoStatsReq {
    return new GetTxoStatsReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTxoStatsReq {
    return new GetTxoStatsReq().fromJsonString(jsonString, options);
  }

  static equals(a: GetTxoStatsReq | PlainMessage<GetTxoStatsReq> | undefined, b: GetTxoStatsReq | PlainMessage<GetTxoStatsReq> | undefined): boolean {
    return proto3.util.equals(GetTxoStatsReq, a, b);
  }
}

/**
 * Response type for NetworkMetricsService:getTxoStats
 *
 * @generated from message co.topl.genus.services.GetTxoStatsRes
 */
export class GetTxoStatsRes extends Message<GetTxoStatsRes> {
  /**
   * @generated from field: co.topl.genus.services.TxoStats txos = 1;
   */
  txos?: TxoStats;

  constructor(data?: PartialMessage<GetTxoStatsRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GetTxoStatsRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "txos", kind: "message", T: TxoStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTxoStatsRes {
    return new GetTxoStatsRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTxoStatsRes {
    return new GetTxoStatsRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTxoStatsRes {
    return new GetTxoStatsRes().fromJsonString(jsonString, options);
  }

  static equals(a: GetTxoStatsRes | PlainMessage<GetTxoStatsRes> | undefined, b: GetTxoStatsRes | PlainMessage<GetTxoStatsRes> | undefined): boolean {
    return proto3.util.equals(GetTxoStatsRes, a, b);
  }
}

/**
 * Request type for NetworkMetricsService:getBlockchainSizeStats
 *
 * @generated from message co.topl.genus.services.BlockchainSizeStatsReq
 */
export class BlockchainSizeStatsReq extends Message<BlockchainSizeStatsReq> {
  constructor(data?: PartialMessage<BlockchainSizeStatsReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.BlockchainSizeStatsReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockchainSizeStatsReq {
    return new BlockchainSizeStatsReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockchainSizeStatsReq {
    return new BlockchainSizeStatsReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockchainSizeStatsReq {
    return new BlockchainSizeStatsReq().fromJsonString(jsonString, options);
  }

  static equals(a: BlockchainSizeStatsReq | PlainMessage<BlockchainSizeStatsReq> | undefined, b: BlockchainSizeStatsReq | PlainMessage<BlockchainSizeStatsReq> | undefined): boolean {
    return proto3.util.equals(BlockchainSizeStatsReq, a, b);
  }
}

/**
 * Response type for NetworkMetricsService:getBlockchainSizeStats
 *
 * @generated from message co.topl.genus.services.BlockchainSizeStatsRes
 */
export class BlockchainSizeStatsRes extends Message<BlockchainSizeStatsRes> {
  /**
   * @generated from field: co.topl.genus.services.BlockchainSizeStats blockchainSize = 1;
   */
  blockchainSize?: BlockchainSizeStats;

  constructor(data?: PartialMessage<BlockchainSizeStatsRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.BlockchainSizeStatsRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blockchainSize", kind: "message", T: BlockchainSizeStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockchainSizeStatsRes {
    return new BlockchainSizeStatsRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockchainSizeStatsRes {
    return new BlockchainSizeStatsRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockchainSizeStatsRes {
    return new BlockchainSizeStatsRes().fromJsonString(jsonString, options);
  }

  static equals(a: BlockchainSizeStatsRes | PlainMessage<BlockchainSizeStatsRes> | undefined, b: BlockchainSizeStatsRes | PlainMessage<BlockchainSizeStatsRes> | undefined): boolean {
    return proto3.util.equals(BlockchainSizeStatsRes, a, b);
  }
}

/**
 * Request type for NetworkMetricsService:getBlockStats
 *
 * @generated from message co.topl.genus.services.BlockStatsReq
 */
export class BlockStatsReq extends Message<BlockStatsReq> {
  constructor(data?: PartialMessage<BlockStatsReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.BlockStatsReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockStatsReq {
    return new BlockStatsReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockStatsReq {
    return new BlockStatsReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockStatsReq {
    return new BlockStatsReq().fromJsonString(jsonString, options);
  }

  static equals(a: BlockStatsReq | PlainMessage<BlockStatsReq> | undefined, b: BlockStatsReq | PlainMessage<BlockStatsReq> | undefined): boolean {
    return proto3.util.equals(BlockStatsReq, a, b);
  }
}

/**
 * Response type for NetworkMetricsService:getBlockStats
 *
 * @generated from message co.topl.genus.services.BlockStatsRes
 */
export class BlockStatsRes extends Message<BlockStatsRes> {
  /**
   * @generated from field: co.topl.genus.services.BlockStats blockStats = 1;
   */
  blockStats?: BlockStats;

  constructor(data?: PartialMessage<BlockStatsRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.BlockStatsRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blockStats", kind: "message", T: BlockStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockStatsRes {
    return new BlockStatsRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockStatsRes {
    return new BlockStatsRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockStatsRes {
    return new BlockStatsRes().fromJsonString(jsonString, options);
  }

  static equals(a: BlockStatsRes | PlainMessage<BlockStatsRes> | undefined, b: BlockStatsRes | PlainMessage<BlockStatsRes> | undefined): boolean {
    return proto3.util.equals(BlockStatsRes, a, b);
  }
}

/**
 * Response from CreateOnChainTransactionIndex request
 *
 * @generated from message co.topl.genus.services.CreateOnChainTransactionIndexResponse
 */
export class CreateOnChainTransactionIndexResponse extends Message<CreateOnChainTransactionIndexResponse> {
  /**
   * True if index was created.
   *
   * @generated from field: bool ok = 1;
   */
  ok = false;

  constructor(data?: PartialMessage<CreateOnChainTransactionIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.CreateOnChainTransactionIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOnChainTransactionIndexResponse {
    return new CreateOnChainTransactionIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOnChainTransactionIndexResponse {
    return new CreateOnChainTransactionIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOnChainTransactionIndexResponse {
    return new CreateOnChainTransactionIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOnChainTransactionIndexResponse | PlainMessage<CreateOnChainTransactionIndexResponse> | undefined, b: CreateOnChainTransactionIndexResponse | PlainMessage<CreateOnChainTransactionIndexResponse> | undefined): boolean {
    return proto3.util.equals(CreateOnChainTransactionIndexResponse, a, b);
  }
}

/**
 * Used to request TxOs by their associated lock address
 *
 * @generated from message co.topl.genus.services.QueryByLockAddressRequest
 */
export class QueryByLockAddressRequest extends Message<QueryByLockAddressRequest> {
  /**
   * Address of interest
   *
   * @generated from field: co.topl.brambl.models.LockAddress address = 1;
   */
  address?: LockAddress;

  /**
   * The default value for confidenceFactor is 0.9999999 (7 nines)
   *
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  /**
   * Filter by status
   *
   * @generated from field: co.topl.genus.services.TxoState state = 3;
   */
  state = TxoState.SPENT;

  constructor(data?: PartialMessage<QueryByLockAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.QueryByLockAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "message", T: LockAddress },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(TxoState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryByLockAddressRequest {
    return new QueryByLockAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryByLockAddressRequest {
    return new QueryByLockAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryByLockAddressRequest {
    return new QueryByLockAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryByLockAddressRequest | PlainMessage<QueryByLockAddressRequest> | undefined, b: QueryByLockAddressRequest | PlainMessage<QueryByLockAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryByLockAddressRequest, a, b);
  }
}

/**
 * Used to request TxOs by their asset type
 *
 * @generated from message co.topl.genus.services.QueryByAssetLabelRequest
 */
export class QueryByAssetLabelRequest extends Message<QueryByAssetLabelRequest> {
  /**
   * @generated from field: co.topl.genus.services.AssetLabel assetLabel = 1;
   */
  assetLabel?: AssetLabel;

  /**
   * The default value for confidenceFactor is 0.9999999 (7 nines)
   *
   * @generated from field: co.topl.genus.services.ConfidenceFactor confidenceFactor = 2;
   */
  confidenceFactor?: ConfidenceFactor;

  constructor(data?: PartialMessage<QueryByAssetLabelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.QueryByAssetLabelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assetLabel", kind: "message", T: AssetLabel },
    { no: 2, name: "confidenceFactor", kind: "message", T: ConfidenceFactor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryByAssetLabelRequest {
    return new QueryByAssetLabelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryByAssetLabelRequest {
    return new QueryByAssetLabelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryByAssetLabelRequest {
    return new QueryByAssetLabelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryByAssetLabelRequest | PlainMessage<QueryByAssetLabelRequest> | undefined, b: QueryByAssetLabelRequest | PlainMessage<QueryByAssetLabelRequest> | undefined): boolean {
    return proto3.util.equals(QueryByAssetLabelRequest, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.TxoLockAddressResponse
 */
export class TxoLockAddressResponse extends Message<TxoLockAddressResponse> {
  /**
   * @generated from field: repeated co.topl.genus.services.Txo Txos = 1;
   */
  Txos: Txo[] = [];

  constructor(data?: PartialMessage<TxoLockAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.TxoLockAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Txos", kind: "message", T: Txo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxoLockAddressResponse {
    return new TxoLockAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxoLockAddressResponse {
    return new TxoLockAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxoLockAddressResponse {
    return new TxoLockAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TxoLockAddressResponse | PlainMessage<TxoLockAddressResponse> | undefined, b: TxoLockAddressResponse | PlainMessage<TxoLockAddressResponse> | undefined): boolean {
    return proto3.util.equals(TxoLockAddressResponse, a, b);
  }
}

/**
 * A request to create an index of transactions based on their on-chain data
 *
 * @generated from message co.topl.genus.services.CreateOnChainTransactionIndexRequest
 */
export class CreateOnChainTransactionIndexRequest extends Message<CreateOnChainTransactionIndexRequest> {
  /**
   * @generated from field: co.topl.genus.services.IndexSpec indexSpec = 1;
   */
  indexSpec?: IndexSpec;

  /**
   * If populate is true, then scan the existing transaction in the database to populate the index.
   *
   * @generated from field: bool populate = 2;
   */
  populate = false;

  constructor(data?: PartialMessage<CreateOnChainTransactionIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.CreateOnChainTransactionIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "indexSpec", kind: "message", T: IndexSpec },
    { no: 2, name: "populate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOnChainTransactionIndexRequest {
    return new CreateOnChainTransactionIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOnChainTransactionIndexRequest {
    return new CreateOnChainTransactionIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOnChainTransactionIndexRequest {
    return new CreateOnChainTransactionIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOnChainTransactionIndexRequest | PlainMessage<CreateOnChainTransactionIndexRequest> | undefined, b: CreateOnChainTransactionIndexRequest | PlainMessage<CreateOnChainTransactionIndexRequest> | undefined): boolean {
    return proto3.util.equals(CreateOnChainTransactionIndexRequest, a, b);
  }
}

/**
 * Used to request a group policy associated by groupId
 *
 * @generated from message co.topl.genus.services.QueryByGroupIdRequest
 */
export class QueryByGroupIdRequest extends Message<QueryByGroupIdRequest> {
  /**
   * GroupId of interest
   *
   * @generated from field: co.topl.brambl.models.GroupId groupId = 1;
   */
  groupId?: GroupId;

  constructor(data?: PartialMessage<QueryByGroupIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.QueryByGroupIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groupId", kind: "message", T: GroupId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryByGroupIdRequest {
    return new QueryByGroupIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryByGroupIdRequest {
    return new QueryByGroupIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryByGroupIdRequest {
    return new QueryByGroupIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryByGroupIdRequest | PlainMessage<QueryByGroupIdRequest> | undefined, b: QueryByGroupIdRequest | PlainMessage<QueryByGroupIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryByGroupIdRequest, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.GroupPolicyResponse
 */
export class GroupPolicyResponse extends Message<GroupPolicyResponse> {
  /**
   * @generated from field: co.topl.brambl.models.Event.GroupPolicy groupPolicy = 1;
   */
  groupPolicy?: Event_GroupPolicy;

  constructor(data?: PartialMessage<GroupPolicyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GroupPolicyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groupPolicy", kind: "message", T: Event_GroupPolicy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupPolicyResponse {
    return new GroupPolicyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupPolicyResponse {
    return new GroupPolicyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupPolicyResponse {
    return new GroupPolicyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GroupPolicyResponse | PlainMessage<GroupPolicyResponse> | undefined, b: GroupPolicyResponse | PlainMessage<GroupPolicyResponse> | undefined): boolean {
    return proto3.util.equals(GroupPolicyResponse, a, b);
  }
}

/**
 * Used to request a series policy associated by seriesId
 *
 * @generated from message co.topl.genus.services.QueryBySeriesIdRequest
 */
export class QueryBySeriesIdRequest extends Message<QueryBySeriesIdRequest> {
  /**
   * GroupId of interest
   *
   * @generated from field: co.topl.brambl.models.SeriesId seriesId = 1;
   */
  seriesId?: SeriesId;

  constructor(data?: PartialMessage<QueryBySeriesIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.QueryBySeriesIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "seriesId", kind: "message", T: SeriesId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBySeriesIdRequest {
    return new QueryBySeriesIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBySeriesIdRequest {
    return new QueryBySeriesIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBySeriesIdRequest {
    return new QueryBySeriesIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBySeriesIdRequest | PlainMessage<QueryBySeriesIdRequest> | undefined, b: QueryBySeriesIdRequest | PlainMessage<QueryBySeriesIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryBySeriesIdRequest, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.SeriesPolicyResponse
 */
export class SeriesPolicyResponse extends Message<SeriesPolicyResponse> {
  /**
   * @generated from field: co.topl.brambl.models.Event.SeriesPolicy seriesPolicy = 1;
   */
  seriesPolicy?: Event_SeriesPolicy;

  constructor(data?: PartialMessage<SeriesPolicyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.SeriesPolicyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "seriesPolicy", kind: "message", T: Event_SeriesPolicy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeriesPolicyResponse {
    return new SeriesPolicyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeriesPolicyResponse {
    return new SeriesPolicyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeriesPolicyResponse {
    return new SeriesPolicyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SeriesPolicyResponse | PlainMessage<SeriesPolicyResponse> | undefined, b: SeriesPolicyResponse | PlainMessage<SeriesPolicyResponse> | undefined): boolean {
    return proto3.util.equals(SeriesPolicyResponse, a, b);
  }
}

/**
 * Definitions of existing database indexes.
 *
 * @generated from message co.topl.genus.services.IndexSpecs
 */
export class IndexSpecs extends Message<IndexSpecs> {
  /**
   * @generated from field: repeated co.topl.genus.services.IndexSpec indexSpec = 1;
   */
  indexSpec: IndexSpec[] = [];

  constructor(data?: PartialMessage<IndexSpecs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.IndexSpecs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "indexSpec", kind: "message", T: IndexSpec, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexSpecs {
    return new IndexSpecs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexSpecs {
    return new IndexSpecs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexSpecs {
    return new IndexSpecs().fromJsonString(jsonString, options);
  }

  static equals(a: IndexSpecs | PlainMessage<IndexSpecs> | undefined, b: IndexSpecs | PlainMessage<IndexSpecs> | undefined): boolean {
    return proto3.util.equals(IndexSpecs, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.IndexDef
 */
export class IndexDef extends Message<IndexDef> {
  /**
   * @generated from oneof co.topl.genus.services.IndexDef.xdev
   */
  xdev: {
    /**
     * @generated from field: co.topl.genus.services.CreateOnChainTransactionIndexRequest onChain = 1;
     */
    value: CreateOnChainTransactionIndexRequest;
    case: "onChain";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<IndexDef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.IndexDef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "onChain", kind: "message", T: CreateOnChainTransactionIndexRequest, oneof: "xdev" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexDef {
    return new IndexDef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexDef {
    return new IndexDef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexDef {
    return new IndexDef().fromJsonString(jsonString, options);
  }

  static equals(a: IndexDef | PlainMessage<IndexDef> | undefined, b: IndexDef | PlainMessage<IndexDef> | undefined): boolean {
    return proto3.util.equals(IndexDef, a, b);
  }
}

/**
 * The message that is sent when requesting information about the existing Genus indexes
 *
 * @generated from message co.topl.genus.services.GetExistingTransactionIndexesRequest
 */
export class GetExistingTransactionIndexesRequest extends Message<GetExistingTransactionIndexesRequest> {
  constructor(data?: PartialMessage<GetExistingTransactionIndexesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GetExistingTransactionIndexesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExistingTransactionIndexesRequest {
    return new GetExistingTransactionIndexesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExistingTransactionIndexesRequest {
    return new GetExistingTransactionIndexesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExistingTransactionIndexesRequest {
    return new GetExistingTransactionIndexesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetExistingTransactionIndexesRequest | PlainMessage<GetExistingTransactionIndexesRequest> | undefined, b: GetExistingTransactionIndexesRequest | PlainMessage<GetExistingTransactionIndexesRequest> | undefined): boolean {
    return proto3.util.equals(GetExistingTransactionIndexesRequest, a, b);
  }
}

/**
 * Specify the name of an index to be dropped
 *
 * @generated from message co.topl.genus.services.DropIndexRequest
 */
export class DropIndexRequest extends Message<DropIndexRequest> {
  /**
   * @generated from field: string indexName = 1;
   */
  indexName = "";

  constructor(data?: PartialMessage<DropIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.DropIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "indexName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DropIndexRequest {
    return new DropIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DropIndexRequest {
    return new DropIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DropIndexRequest {
    return new DropIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DropIndexRequest | PlainMessage<DropIndexRequest> | undefined, b: DropIndexRequest | PlainMessage<DropIndexRequest> | undefined): boolean {
    return proto3.util.equals(DropIndexRequest, a, b);
  }
}

/**
 * Return true if the requested index was dropped or false if it was not (Most likely because it did not exist).
 *
 * @generated from message co.topl.genus.services.DropIndexResponse
 */
export class DropIndexResponse extends Message<DropIndexResponse> {
  /**
   * @generated from field: bool dropped = 1;
   */
  dropped = false;

  constructor(data?: PartialMessage<DropIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.DropIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dropped", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DropIndexResponse {
    return new DropIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DropIndexResponse {
    return new DropIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DropIndexResponse {
    return new DropIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DropIndexResponse | PlainMessage<DropIndexResponse> | undefined, b: DropIndexResponse | PlainMessage<DropIndexResponse> | undefined): boolean {
    return proto3.util.equals(DropIndexResponse, a, b);
  }
}

/**
 * Request the use of a named index to find transactions containing data that matches specified values.
 *
 * @generated from message co.topl.genus.services.GetIndexedTransactionsRequest
 */
export class GetIndexedTransactionsRequest extends Message<GetIndexedTransactionsRequest> {
  /**
   * The name of the index to search
   *
   * @generated from field: string indexName = 1;
   */
  indexName = "";

  /**
   * The index value(s) to search for.
   *
   * @generated from field: repeated co.topl.genus.services.IndexMatchValue value = 2;
   */
  value: IndexMatchValue[] = [];

  /**
   * The maximum number of transactions to be returned
   *
   * @generated from field: uint32 maxResults = 3;
   */
  maxResults = 0;

  /**
   * A number of transactions to be skipped. This is useful for paging results.
   *
   * @generated from field: uint64 skipResults = 4;
   */
  skipResults = protoInt64.zero;

  constructor(data?: PartialMessage<GetIndexedTransactionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.GetIndexedTransactionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "indexName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: IndexMatchValue, repeated: true },
    { no: 3, name: "maxResults", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "skipResults", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIndexedTransactionsRequest {
    return new GetIndexedTransactionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIndexedTransactionsRequest {
    return new GetIndexedTransactionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIndexedTransactionsRequest {
    return new GetIndexedTransactionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIndexedTransactionsRequest | PlainMessage<GetIndexedTransactionsRequest> | undefined, b: GetIndexedTransactionsRequest | PlainMessage<GetIndexedTransactionsRequest> | undefined): boolean {
    return proto3.util.equals(GetIndexedTransactionsRequest, a, b);
  }
}

/**
 * A value that may match a field in an index.
 *
 * @generated from message co.topl.genus.services.IndexMatchValue
 */
export class IndexMatchValue extends Message<IndexMatchValue> {
  /**
   * @generated from oneof co.topl.genus.services.IndexMatchValue.value
   */
  value: {
    /**
     * @generated from field: string stringValue = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: int64 intValue = 2;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * @generated from field: uint64 uintValue = 3;
     */
    value: bigint;
    case: "uintValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: google.protobuf.StringValue fieldName = 4;
   */
  fieldName?: string;

  constructor(data?: PartialMessage<IndexMatchValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.IndexMatchValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stringValue", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "intValue", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 3, name: "uintValue", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "value" },
    { no: 4, name: "fieldName", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexMatchValue {
    return new IndexMatchValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexMatchValue {
    return new IndexMatchValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexMatchValue {
    return new IndexMatchValue().fromJsonString(jsonString, options);
  }

  static equals(a: IndexMatchValue | PlainMessage<IndexMatchValue> | undefined, b: IndexMatchValue | PlainMessage<IndexMatchValue> | undefined): boolean {
    return proto3.util.equals(IndexMatchValue, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.TxoStats
 */
export class TxoStats extends Message<TxoStats> {
  /**
   * @generated from field: uint64 spent = 1;
   */
  spent = protoInt64.zero;

  /**
   * @generated from field: uint64 unspent = 2;
   */
  unspent = protoInt64.zero;

  /**
   * @generated from field: uint64 pending = 4;
   */
  pending = protoInt64.zero;

  /**
   * @generated from field: uint64 total = 5;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<TxoStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.TxoStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "unspent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "pending", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxoStats {
    return new TxoStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxoStats {
    return new TxoStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxoStats {
    return new TxoStats().fromJsonString(jsonString, options);
  }

  static equals(a: TxoStats | PlainMessage<TxoStats> | undefined, b: TxoStats | PlainMessage<TxoStats> | undefined): boolean {
    return proto3.util.equals(TxoStats, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.BlockchainSizeStats
 */
export class BlockchainSizeStats extends Message<BlockchainSizeStats> {
  /**
   * Sum of BlockHeader immutable bytes
   *
   * @generated from field: uint64 blockHeaderBytes = 1;
   */
  blockHeaderBytes = protoInt64.zero;

  /**
   * Sum of Transaction immutable bytes
   *
   * @generated from field: uint64 transactionBytes = 2;
   */
  transactionBytes = protoInt64.zero;

  constructor(data?: PartialMessage<BlockchainSizeStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.BlockchainSizeStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blockHeaderBytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "transactionBytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockchainSizeStats {
    return new BlockchainSizeStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockchainSizeStats {
    return new BlockchainSizeStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockchainSizeStats {
    return new BlockchainSizeStats().fromJsonString(jsonString, options);
  }

  static equals(a: BlockchainSizeStats | PlainMessage<BlockchainSizeStats> | undefined, b: BlockchainSizeStats | PlainMessage<BlockchainSizeStats> | undefined): boolean {
    return proto3.util.equals(BlockchainSizeStats, a, b);
  }
}

/**
 * @generated from message co.topl.genus.services.BlockStats
 */
export class BlockStats extends Message<BlockStats> {
  /**
   * Sum of empty Blocks, total blocks without transactions in them
   *
   * @generated from field: uint64 empty = 1;
   */
  empty = protoInt64.zero;

  /**
   * Sum of nonEmpty, total blocks with transactions in them
   *
   * @generated from field: uint64 nonEmpty = 2;
   */
  nonEmpty = protoInt64.zero;

  constructor(data?: PartialMessage<BlockStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.genus.services.BlockStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "empty", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "nonEmpty", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockStats {
    return new BlockStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockStats {
    return new BlockStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockStats {
    return new BlockStats().fromJsonString(jsonString, options);
  }

  static equals(a: BlockStats | PlainMessage<BlockStats> | undefined, b: BlockStats | PlainMessage<BlockStats> | undefined): boolean {
    return proto3.util.equals(BlockStats, a, b);
  }
}

