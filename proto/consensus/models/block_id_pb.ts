// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file consensus/models/block_id.proto (package co.topl.consensus.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message co.topl.consensus.models.BlockId
 */
export class BlockId extends Message<BlockId> {
  /**
   * length = 32
   *
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<BlockId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.consensus.models.BlockId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockId {
    return new BlockId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockId {
    return new BlockId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockId {
    return new BlockId().fromJsonString(jsonString, options);
  }

  static equals(a: BlockId | PlainMessage<BlockId> | undefined, b: BlockId | PlainMessage<BlockId> | undefined): boolean {
    return proto3.util.equals(BlockId, a, b);
  }
}

