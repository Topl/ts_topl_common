// @generated by protoc-gen-es v1.8.0
// @generated from file consensus/models/eligibility_certificate.proto (package co.topl.consensus.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A certificate proving the operator's election
 *
 * @generated from message co.topl.consensus.models.EligibilityCertificate
 */
export declare class EligibilityCertificate extends Message<EligibilityCertificate> {
  /**
   * Signs `eta ++ slot` using the `vrfSK`
   *
   * @generated from field: bytes vrfSig = 1;
   */
  vrfSig: Uint8Array;

  /**
   * The VRF VK
   *
   * @generated from field: bytes vrfVK = 2;
   */
  vrfVK: Uint8Array;

  /**
   * Hash of the operator's `threshold`
   * routine = blake2b256
   * length = 32
   *
   * @generated from field: bytes thresholdEvidence = 3;
   */
  thresholdEvidence: Uint8Array;

  /**
   * The epoch's randomness
   * length = 32
   *
   * @generated from field: bytes eta = 4;
   */
  eta: Uint8Array;

  constructor(data?: PartialMessage<EligibilityCertificate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.consensus.models.EligibilityCertificate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EligibilityCertificate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EligibilityCertificate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EligibilityCertificate;

  static equals(a: EligibilityCertificate | PlainMessage<EligibilityCertificate> | undefined, b: EligibilityCertificate | PlainMessage<EligibilityCertificate> | undefined): boolean;
}

