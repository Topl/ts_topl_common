// @generated by protoc-gen-es v1.8.0
// @generated from file consensus/models/block_header.proto (package co.topl.consensus.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { BlockId } from "./block_id_pb.js";
import type { EligibilityCertificate } from "./eligibility_certificate_pb.js";
import type { OperationalCertificate } from "./operational_certificate_pb.js";
import type { StakingAddress } from "./staking_pb.js";
import type { ProtocolVersion } from "./protocol_version_pb.js";

/**
 * Captures a block producer's consensus-commitment to a new block
 *
 * @generated from message co.topl.consensus.models.BlockHeader
 */
export declare class BlockHeader extends Message<BlockHeader> {
  /**
   * The ID of _this_ block header.  This value is optional and its contents are not included in the signable or identifiable data.  Clients which _can_ verify
   * this value should verify this value, but some clients may not be able to or need to, in which case this field acts as a convenience.
   *
   * @generated from field: co.topl.consensus.models.BlockId headerId = 12;
   */
  headerId?: BlockId;

  /**
   * The parent block's ID.  Each header builds from a single parent.
   *
   * @generated from field: co.topl.consensus.models.BlockId parentHeaderId = 1;
   */
  parentHeaderId?: BlockId;

  /**
   * The slot of the parent block
   *
   * @generated from field: uint64 parentSlot = 2;
   */
  parentSlot: bigint;

  /**
   * The commitment/accumulator of the block body
   * length = 32
   *
   * @generated from field: bytes txRoot = 3;
   */
  txRoot: Uint8Array;

  /**
   * A fuzzy search for addresses associated with this block
   * length = 256
   *
   * @generated from field: bytes bloomFilter = 4;
   */
  bloomFilter: Uint8Array;

  /**
   * The UTC UNIX timestamp (ms) when the block was created
   *
   * @generated from field: uint64 timestamp = 5;
   */
  timestamp: bigint;

  /**
   * The 1-based index of this block in the blockchain
   *
   * @generated from field: uint64 height = 6;
   */
  height: bigint;

  /**
   * The time-slot in which the block producer created the block
   *
   * @generated from field: uint64 slot = 7;
   */
  slot: bigint;

  /**
   * A certificate indicating that the block producer was eligible to make this block
   *
   * @generated from field: co.topl.consensus.models.EligibilityCertificate eligibilityCertificate = 8;
   */
  eligibilityCertificate?: EligibilityCertificate;

  /**
   * A certificate indicating the operator's commitment to this block
   *
   * @generated from field: co.topl.consensus.models.OperationalCertificate operationalCertificate = 9;
   */
  operationalCertificate?: OperationalCertificate;

  /**
   * Optional metadata stamped by the operator.  Must be latin-1 encoded, and must be at most 32 bytes in length.
   * optional
   *
   * @generated from field: bytes metadata = 10;
   */
  metadata: Uint8Array;

  /**
   * The operator's staking address
   *
   * @generated from field: co.topl.consensus.models.StakingAddress address = 11;
   */
  address?: StakingAddress;

  /**
   * Protocol Version
   *
   * @generated from field: co.topl.consensus.models.ProtocolVersion version = 13;
   */
  version?: ProtocolVersion;

  constructor(data?: PartialMessage<BlockHeader>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.consensus.models.BlockHeader";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockHeader;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockHeader;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockHeader;

  static equals(a: BlockHeader | PlainMessage<BlockHeader> | undefined, b: BlockHeader | PlainMessage<BlockHeader> | undefined): boolean;
}

