// @generated by protoc-gen-es v1.8.0
// @generated from file consensus/models/staking.proto (package co.topl.consensus.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { SignatureKesProduct } from "./operational_certificate_pb.js";
import type { Int128 } from "../../quivr/models/shared_pb.js";

/**
 * A reference to a unique staker
 *
 * @generated from message co.topl.consensus.models.StakingAddress
 */
export declare class StakingAddress extends Message<StakingAddress> {
  /**
   * The address bytes of the staker, usually an ed25519 VK
   *
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<StakingAddress>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.consensus.models.StakingAddress";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakingAddress;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakingAddress;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakingAddress;

  static equals(a: StakingAddress | PlainMessage<StakingAddress> | undefined, b: StakingAddress | PlainMessage<StakingAddress> | undefined): boolean;
}

/**
 * A proof-of-stake registration
 *
 * @generated from message co.topl.consensus.models.StakingRegistration
 */
export declare class StakingRegistration extends Message<StakingRegistration> {
  /**
   * the staker's address
   *
   * @generated from field: co.topl.consensus.models.StakingAddress address = 1;
   */
  address?: StakingAddress;

  /**
   * the staker's commitment to a VRF VK and StakingAddress, signed using KES SK at timestep=0
   *
   * @generated from field: co.topl.consensus.models.SignatureKesProduct signature = 2;
   */
  signature?: SignatureKesProduct;

  constructor(data?: PartialMessage<StakingRegistration>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.consensus.models.StakingRegistration";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakingRegistration;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakingRegistration;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakingRegistration;

  static equals(a: StakingRegistration | PlainMessage<StakingRegistration> | undefined, b: StakingRegistration | PlainMessage<StakingRegistration> | undefined): boolean;
}

/**
 * An active, registered participate in the consensus protocol, for a particular epoch.
 *
 * @generated from message co.topl.consensus.models.ActiveStaker
 */
export declare class ActiveStaker extends Message<ActiveStaker> {
  /**
   * the staker's registration
   *
   * @generated from field: co.topl.consensus.models.StakingRegistration registration = 1;
   */
  registration?: StakingRegistration;

  /**
   * the quantity of staked tokens for the epoch
   *
   * @generated from field: quivr.models.Int128 quantity = 3;
   */
  quantity?: Int128;

  constructor(data?: PartialMessage<ActiveStaker>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.consensus.models.ActiveStaker";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveStaker;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveStaker;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveStaker;

  static equals(a: ActiveStaker | PlainMessage<ActiveStaker> | undefined, b: ActiveStaker | PlainMessage<ActiveStaker> | undefined): boolean;
}

