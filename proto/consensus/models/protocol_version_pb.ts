// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file consensus/models/protocol_version.proto (package co.topl.consensus.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Protocol Version Specification, see TIP-003
 *
 * @generated from message co.topl.consensus.models.ProtocolVersion
 */
export class ProtocolVersion extends Message<ProtocolVersion> {
  /**
   * `firstDigit` Significant hard fork/version change/consensus rule set change
   *
   * @generated from field: uint32 firstDigit = 1;
   */
  firstDigit = 0;

  /**
   * `secondDigit` Feature additions, bugs fixing hard forks, minor hard forks, significant soft forks, interface should  work the same
   *
   * @generated from field: uint32 secondDigit = 2;
   */
  secondDigit = 0;

  /**
   * `thirdDigit` Minor changes
   *
   * @generated from field: uint32 thirdDigit = 3;
   */
  thirdDigit = 0;

  constructor(data?: PartialMessage<ProtocolVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.consensus.models.ProtocolVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "firstDigit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "secondDigit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "thirdDigit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtocolVersion {
    return new ProtocolVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtocolVersion {
    return new ProtocolVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtocolVersion {
    return new ProtocolVersion().fromJsonString(jsonString, options);
  }

  static equals(a: ProtocolVersion | PlainMessage<ProtocolVersion> | undefined, b: ProtocolVersion | PlainMessage<ProtocolVersion> | undefined): boolean {
    return proto3.util.equals(ProtocolVersion, a, b);
  }
}

