// @generated by protoc-gen-es v1.8.0
// @generated from file consensus/models/operational_certificate.proto (package co.topl.consensus.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A certificate which commits an operator to a linear key, which is then used to sign the block
 *
 * @generated from message co.topl.consensus.models.OperationalCertificate
 */
export declare class OperationalCertificate extends Message<OperationalCertificate> {
  /**
   * The KES VK of the parent key (forward-secure) (hour+minute hands)
   *
   * @generated from field: co.topl.consensus.models.VerificationKeyKesProduct parentVK = 1;
   */
  parentVK?: VerificationKeyKesProduct;

  /**
   * Signs the `childVK` using the `parentSK`
   *
   * @generated from field: co.topl.consensus.models.SignatureKesProduct parentSignature = 2;
   */
  parentSignature?: SignatureKesProduct;

  /**
   * The linear VK
   *
   * @generated from field: bytes childVK = 3;
   */
  childVK: Uint8Array;

  /**
   * The signature of the block
   *
   * @generated from field: bytes childSignature = 4;
   */
  childSignature: Uint8Array;

  constructor(data?: PartialMessage<OperationalCertificate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.consensus.models.OperationalCertificate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationalCertificate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationalCertificate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationalCertificate;

  static equals(a: OperationalCertificate | PlainMessage<OperationalCertificate> | undefined, b: OperationalCertificate | PlainMessage<OperationalCertificate> | undefined): boolean;
}

/**
 * @generated from message co.topl.consensus.models.VerificationKeyKesProduct
 */
export declare class VerificationKeyKesProduct extends Message<VerificationKeyKesProduct> {
  /**
   * length = 32
   *
   * @generated from field: bytes value = 1;
   */
  value: Uint8Array;

  /**
   * @generated from field: uint32 step = 2;
   */
  step: number;

  constructor(data?: PartialMessage<VerificationKeyKesProduct>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.consensus.models.VerificationKeyKesProduct";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationKeyKesProduct;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationKeyKesProduct;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationKeyKesProduct;

  static equals(a: VerificationKeyKesProduct | PlainMessage<VerificationKeyKesProduct> | undefined, b: VerificationKeyKesProduct | PlainMessage<VerificationKeyKesProduct> | undefined): boolean;
}

/**
 * @generated from message co.topl.consensus.models.SignatureKesSum
 */
export declare class SignatureKesSum extends Message<SignatureKesSum> {
  /**
   * @generated from field: bytes verificationKey = 1;
   */
  verificationKey: Uint8Array;

  /**
   * @generated from field: bytes signature = 2;
   */
  signature: Uint8Array;

  /**
   * item length = 32
   *
   * @generated from field: repeated bytes witness = 3;
   */
  witness: Uint8Array[];

  constructor(data?: PartialMessage<SignatureKesSum>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.consensus.models.SignatureKesSum";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignatureKesSum;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignatureKesSum;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignatureKesSum;

  static equals(a: SignatureKesSum | PlainMessage<SignatureKesSum> | undefined, b: SignatureKesSum | PlainMessage<SignatureKesSum> | undefined): boolean;
}

/**
 * @generated from message co.topl.consensus.models.SignatureKesProduct
 */
export declare class SignatureKesProduct extends Message<SignatureKesProduct> {
  /**
   * @generated from field: co.topl.consensus.models.SignatureKesSum superSignature = 1;
   */
  superSignature?: SignatureKesSum;

  /**
   * @generated from field: co.topl.consensus.models.SignatureKesSum subSignature = 2;
   */
  subSignature?: SignatureKesSum;

  /**
   * length = 32
   *
   * @generated from field: bytes subRoot = 3;
   */
  subRoot: Uint8Array;

  constructor(data?: PartialMessage<SignatureKesProduct>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "co.topl.consensus.models.SignatureKesProduct";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignatureKesProduct;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignatureKesProduct;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignatureKesProduct;

  static equals(a: SignatureKesProduct | PlainMessage<SignatureKesProduct> | undefined, b: SignatureKesProduct | PlainMessage<SignatureKesProduct> | undefined): boolean;
}

