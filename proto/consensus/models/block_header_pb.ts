// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file consensus/models/block_header.proto (package co.topl.consensus.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BlockId } from "./block_id_pb.js";
import { EligibilityCertificate } from "./eligibility_certificate_pb.js";
import { OperationalCertificate } from "./operational_certificate_pb.js";
import { StakingAddress } from "./staking_pb.js";
import { ProtocolVersion } from "./protocol_version_pb.js";

/**
 * Captures a block producer's consensus-commitment to a new block
 *
 * @generated from message co.topl.consensus.models.BlockHeader
 */
export class BlockHeader extends Message<BlockHeader> {
  /**
   * The ID of _this_ block header.  This value is optional and its contents are not included in the signable or identifiable data.  Clients which _can_ verify
   * this value should verify this value, but some clients may not be able to or need to, in which case this field acts as a convenience.
   *
   * @generated from field: co.topl.consensus.models.BlockId headerId = 12;
   */
  headerId?: BlockId;

  /**
   * The parent block's ID.  Each header builds from a single parent.
   *
   * @generated from field: co.topl.consensus.models.BlockId parentHeaderId = 1;
   */
  parentHeaderId?: BlockId;

  /**
   * The slot of the parent block
   *
   * @generated from field: uint64 parentSlot = 2;
   */
  parentSlot = protoInt64.zero;

  /**
   * The commitment/accumulator of the block body
   * length = 32
   *
   * @generated from field: bytes txRoot = 3;
   */
  txRoot = new Uint8Array(0);

  /**
   * A fuzzy search for addresses associated with this block
   * length = 256
   *
   * @generated from field: bytes bloomFilter = 4;
   */
  bloomFilter = new Uint8Array(0);

  /**
   * The UTC UNIX timestamp (ms) when the block was created
   *
   * @generated from field: uint64 timestamp = 5;
   */
  timestamp = protoInt64.zero;

  /**
   * The 1-based index of this block in the blockchain
   *
   * @generated from field: uint64 height = 6;
   */
  height = protoInt64.zero;

  /**
   * The time-slot in which the block producer created the block
   *
   * @generated from field: uint64 slot = 7;
   */
  slot = protoInt64.zero;

  /**
   * A certificate indicating that the block producer was eligible to make this block
   *
   * @generated from field: co.topl.consensus.models.EligibilityCertificate eligibilityCertificate = 8;
   */
  eligibilityCertificate?: EligibilityCertificate;

  /**
   * A certificate indicating the operator's commitment to this block
   *
   * @generated from field: co.topl.consensus.models.OperationalCertificate operationalCertificate = 9;
   */
  operationalCertificate?: OperationalCertificate;

  /**
   * Optional metadata stamped by the operator.  Must be latin-1 encoded, and must be at most 32 bytes in length.
   * optional
   *
   * @generated from field: bytes metadata = 10;
   */
  metadata = new Uint8Array(0);

  /**
   * The operator's staking address
   *
   * @generated from field: co.topl.consensus.models.StakingAddress address = 11;
   */
  address?: StakingAddress;

  /**
   * Protocol Version
   *
   * @generated from field: co.topl.consensus.models.ProtocolVersion version = 13;
   */
  version?: ProtocolVersion;

  constructor(data?: PartialMessage<BlockHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.consensus.models.BlockHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 12, name: "headerId", kind: "message", T: BlockId },
    { no: 1, name: "parentHeaderId", kind: "message", T: BlockId },
    { no: 2, name: "parentSlot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "txRoot", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "bloomFilter", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "eligibilityCertificate", kind: "message", T: EligibilityCertificate },
    { no: 9, name: "operationalCertificate", kind: "message", T: OperationalCertificate },
    { no: 10, name: "metadata", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "address", kind: "message", T: StakingAddress },
    { no: 13, name: "version", kind: "message", T: ProtocolVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockHeader {
    return new BlockHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockHeader {
    return new BlockHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockHeader {
    return new BlockHeader().fromJsonString(jsonString, options);
  }

  static equals(a: BlockHeader | PlainMessage<BlockHeader> | undefined, b: BlockHeader | PlainMessage<BlockHeader> | undefined): boolean {
    return proto3.util.equals(BlockHeader, a, b);
  }
}

