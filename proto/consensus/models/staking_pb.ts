// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file consensus/models/staking.proto (package co.topl.consensus.models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SignatureKesProduct } from "./operational_certificate_pb.js";
import { Int128 } from "../../quivr/models/shared_pb.js";

/**
 * A reference to a unique staker
 *
 * @generated from message co.topl.consensus.models.StakingAddress
 */
export class StakingAddress extends Message<StakingAddress> {
  /**
   * The address bytes of the staker, usually an ed25519 VK
   *
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<StakingAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.consensus.models.StakingAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakingAddress {
    return new StakingAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakingAddress {
    return new StakingAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakingAddress {
    return new StakingAddress().fromJsonString(jsonString, options);
  }

  static equals(a: StakingAddress | PlainMessage<StakingAddress> | undefined, b: StakingAddress | PlainMessage<StakingAddress> | undefined): boolean {
    return proto3.util.equals(StakingAddress, a, b);
  }
}

/**
 * A proof-of-stake registration
 *
 * @generated from message co.topl.consensus.models.StakingRegistration
 */
export class StakingRegistration extends Message<StakingRegistration> {
  /**
   * the staker's address
   *
   * @generated from field: co.topl.consensus.models.StakingAddress address = 1;
   */
  address?: StakingAddress;

  /**
   * the staker's commitment to a VRF VK and StakingAddress, signed using KES SK at timestep=0
   *
   * @generated from field: co.topl.consensus.models.SignatureKesProduct signature = 2;
   */
  signature?: SignatureKesProduct;

  constructor(data?: PartialMessage<StakingRegistration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.consensus.models.StakingRegistration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "message", T: StakingAddress },
    { no: 2, name: "signature", kind: "message", T: SignatureKesProduct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakingRegistration {
    return new StakingRegistration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakingRegistration {
    return new StakingRegistration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakingRegistration {
    return new StakingRegistration().fromJsonString(jsonString, options);
  }

  static equals(a: StakingRegistration | PlainMessage<StakingRegistration> | undefined, b: StakingRegistration | PlainMessage<StakingRegistration> | undefined): boolean {
    return proto3.util.equals(StakingRegistration, a, b);
  }
}

/**
 * An active, registered participate in the consensus protocol, for a particular epoch.
 *
 * @generated from message co.topl.consensus.models.ActiveStaker
 */
export class ActiveStaker extends Message<ActiveStaker> {
  /**
   * the staker's registration
   *
   * @generated from field: co.topl.consensus.models.StakingRegistration registration = 1;
   */
  registration?: StakingRegistration;

  /**
   * the quantity of staked tokens for the epoch
   *
   * @generated from field: quivr.models.Int128 quantity = 3;
   */
  quantity?: Int128;

  constructor(data?: PartialMessage<ActiveStaker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "co.topl.consensus.models.ActiveStaker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registration", kind: "message", T: StakingRegistration },
    { no: 3, name: "quantity", kind: "message", T: Int128 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveStaker {
    return new ActiveStaker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveStaker {
    return new ActiveStaker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveStaker {
    return new ActiveStaker().fromJsonString(jsonString, options);
  }

  static equals(a: ActiveStaker | PlainMessage<ActiveStaker> | undefined, b: ActiveStaker | PlainMessage<ActiveStaker> | undefined): boolean {
    return proto3.util.equals(ActiveStaker, a, b);
  }
}

